/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 28.0, "minX": 0.0, "maxY": 11574.0, "series": [{"data": [[0.0, 28.0], [0.1, 28.0], [0.2, 28.0], [0.3, 28.0], [0.4, 35.0], [0.5, 35.0], [0.6, 35.0], [0.7, 93.0], [0.8, 93.0], [0.9, 93.0], [1.0, 104.0], [1.1, 104.0], [1.2, 104.0], [1.3, 104.0], [1.4, 239.0], [1.5, 239.0], [1.6, 239.0], [1.7, 288.0], [1.8, 288.0], [1.9, 288.0], [2.0, 434.0], [2.1, 434.0], [2.2, 434.0], [2.3, 434.0], [2.4, 445.0], [2.5, 445.0], [2.6, 445.0], [2.7, 456.0], [2.8, 456.0], [2.9, 456.0], [3.0, 494.0], [3.1, 494.0], [3.2, 494.0], [3.3, 494.0], [3.4, 522.0], [3.5, 522.0], [3.6, 522.0], [3.7, 526.0], [3.8, 526.0], [3.9, 526.0], [4.0, 638.0], [4.1, 638.0], [4.2, 638.0], [4.3, 638.0], [4.4, 728.0], [4.5, 728.0], [4.6, 728.0], [4.7, 860.0], [4.8, 860.0], [4.9, 860.0], [5.0, 945.0], [5.1, 945.0], [5.2, 945.0], [5.3, 945.0], [5.4, 971.0], [5.5, 971.0], [5.6, 971.0], [5.7, 997.0], [5.8, 997.0], [5.9, 997.0], [6.0, 1008.0], [6.1, 1008.0], [6.2, 1008.0], [6.3, 1008.0], [6.4, 1014.0], [6.5, 1014.0], [6.6, 1014.0], [6.7, 1044.0], [6.8, 1044.0], [6.9, 1044.0], [7.0, 1086.0], [7.1, 1086.0], [7.2, 1086.0], [7.3, 1086.0], [7.4, 1131.0], [7.5, 1131.0], [7.6, 1131.0], [7.7, 1139.0], [7.8, 1139.0], [7.9, 1139.0], [8.0, 1148.0], [8.1, 1148.0], [8.2, 1148.0], [8.3, 1148.0], [8.4, 1174.0], [8.5, 1174.0], [8.6, 1174.0], [8.7, 1177.0], [8.8, 1177.0], [8.9, 1177.0], [9.0, 1208.0], [9.1, 1208.0], [9.2, 1208.0], [9.3, 1208.0], [9.4, 1237.0], [9.5, 1237.0], [9.6, 1237.0], [9.7, 1332.0], [9.8, 1332.0], [9.9, 1332.0], [10.0, 1337.0], [10.1, 1337.0], [10.2, 1337.0], [10.3, 1337.0], [10.4, 1353.0], [10.5, 1353.0], [10.6, 1353.0], [10.7, 1375.0], [10.8, 1375.0], [10.9, 1375.0], [11.0, 1375.0], [11.1, 1385.0], [11.2, 1385.0], [11.3, 1385.0], [11.4, 1404.0], [11.5, 1404.0], [11.6, 1404.0], [11.7, 1443.0], [11.8, 1443.0], [11.9, 1443.0], [12.0, 1443.0], [12.1, 1480.0], [12.2, 1480.0], [12.3, 1480.0], [12.4, 1506.0], [12.5, 1506.0], [12.6, 1506.0], [12.7, 1513.0], [12.8, 1513.0], [12.9, 1513.0], [13.0, 1513.0], [13.1, 1570.0], [13.2, 1570.0], [13.3, 1570.0], [13.4, 1653.0], [13.5, 1653.0], [13.6, 1653.0], [13.7, 1656.0], [13.8, 1656.0], [13.9, 1656.0], [14.0, 1656.0], [14.1, 1657.0], [14.2, 1657.0], [14.3, 1657.0], [14.4, 1665.0], [14.5, 1665.0], [14.6, 1665.0], [14.7, 1669.0], [14.8, 1669.0], [14.9, 1669.0], [15.0, 1669.0], [15.1, 1757.0], [15.2, 1757.0], [15.3, 1757.0], [15.4, 1784.0], [15.5, 1784.0], [15.6, 1784.0], [15.7, 1805.0], [15.8, 1805.0], [15.9, 1805.0], [16.0, 1805.0], [16.1, 1810.0], [16.2, 1810.0], [16.3, 1810.0], [16.4, 1837.0], [16.5, 1837.0], [16.6, 1837.0], [16.7, 1906.0], [16.8, 1906.0], [16.9, 1906.0], [17.0, 1906.0], [17.1, 1908.0], [17.2, 1908.0], [17.3, 1908.0], [17.4, 1936.0], [17.5, 1936.0], [17.6, 1936.0], [17.7, 1946.0], [17.8, 1946.0], [17.9, 1946.0], [18.0, 1946.0], [18.1, 1947.0], [18.2, 1947.0], [18.3, 1947.0], [18.4, 1971.0], [18.5, 1971.0], [18.6, 1971.0], [18.7, 1979.0], [18.8, 1979.0], [18.9, 1979.0], [19.0, 2000.0], [19.1, 2000.0], [19.2, 2000.0], [19.3, 2000.0], [19.4, 2016.0], [19.5, 2016.0], [19.6, 2016.0], [19.7, 2020.0], [19.8, 2020.0], [19.9, 2020.0], [20.0, 2034.0], [20.1, 2034.0], [20.2, 2034.0], [20.3, 2034.0], [20.4, 2212.0], [20.5, 2212.0], [20.6, 2212.0], [20.7, 2278.0], [20.8, 2278.0], [20.9, 2278.0], [21.0, 2294.0], [21.1, 2294.0], [21.2, 2294.0], [21.3, 2294.0], [21.4, 2342.0], [21.5, 2342.0], [21.6, 2342.0], [21.7, 2381.0], [21.8, 2381.0], [21.9, 2381.0], [22.0, 2394.0], [22.1, 2394.0], [22.2, 2394.0], [22.3, 2394.0], [22.4, 2419.0], [22.5, 2419.0], [22.6, 2419.0], [22.7, 2451.0], [22.8, 2451.0], [22.9, 2451.0], [23.0, 2451.0], [23.1, 2451.0], [23.2, 2451.0], [23.3, 2451.0], [23.4, 2473.0], [23.5, 2473.0], [23.6, 2473.0], [23.7, 2565.0], [23.8, 2565.0], [23.9, 2565.0], [24.0, 2570.0], [24.1, 2570.0], [24.2, 2570.0], [24.3, 2570.0], [24.4, 2649.0], [24.5, 2649.0], [24.6, 2649.0], [24.7, 2651.0], [24.8, 2651.0], [24.9, 2651.0], [25.0, 2662.0], [25.1, 2662.0], [25.2, 2662.0], [25.3, 2662.0], [25.4, 2720.0], [25.5, 2720.0], [25.6, 2720.0], [25.7, 2733.0], [25.8, 2733.0], [25.9, 2733.0], [26.0, 2764.0], [26.1, 2764.0], [26.2, 2764.0], [26.3, 2764.0], [26.4, 2770.0], [26.5, 2770.0], [26.6, 2770.0], [26.7, 2791.0], [26.8, 2791.0], [26.9, 2791.0], [27.0, 2825.0], [27.1, 2825.0], [27.2, 2825.0], [27.3, 2825.0], [27.4, 2858.0], [27.5, 2858.0], [27.6, 2858.0], [27.7, 2926.0], [27.8, 2926.0], [27.9, 2926.0], [28.0, 2937.0], [28.1, 2937.0], [28.2, 2937.0], [28.3, 2937.0], [28.4, 2957.0], [28.5, 2957.0], [28.6, 2957.0], [28.7, 2959.0], [28.8, 2959.0], [28.9, 2959.0], [29.0, 2994.0], [29.1, 2994.0], [29.2, 2994.0], [29.3, 2994.0], [29.4, 2998.0], [29.5, 2998.0], [29.6, 2998.0], [29.7, 3038.0], [29.8, 3038.0], [29.9, 3038.0], [30.0, 3039.0], [30.1, 3039.0], [30.2, 3039.0], [30.3, 3039.0], [30.4, 3221.0], [30.5, 3221.0], [30.6, 3221.0], [30.7, 3236.0], [30.8, 3236.0], [30.9, 3236.0], [31.0, 3293.0], [31.1, 3293.0], [31.2, 3293.0], [31.3, 3293.0], [31.4, 3295.0], [31.5, 3295.0], [31.6, 3295.0], [31.7, 3350.0], [31.8, 3350.0], [31.9, 3350.0], [32.0, 3362.0], [32.1, 3362.0], [32.2, 3362.0], [32.3, 3362.0], [32.4, 3423.0], [32.5, 3423.0], [32.6, 3423.0], [32.7, 3423.0], [32.8, 3423.0], [32.9, 3423.0], [33.0, 3448.0], [33.1, 3448.0], [33.2, 3448.0], [33.3, 3448.0], [33.4, 3468.0], [33.5, 3468.0], [33.6, 3468.0], [33.7, 3478.0], [33.8, 3478.0], [33.9, 3478.0], [34.0, 3580.0], [34.1, 3580.0], [34.2, 3580.0], [34.3, 3580.0], [34.4, 3595.0], [34.5, 3595.0], [34.6, 3595.0], [34.7, 3647.0], [34.8, 3647.0], [34.9, 3647.0], [35.0, 3649.0], [35.1, 3649.0], [35.2, 3649.0], [35.3, 3649.0], [35.4, 3691.0], [35.5, 3691.0], [35.6, 3691.0], [35.7, 3697.0], [35.8, 3697.0], [35.9, 3697.0], [36.0, 3755.0], [36.1, 3755.0], [36.2, 3755.0], [36.3, 3755.0], [36.4, 3767.0], [36.5, 3767.0], [36.6, 3767.0], [36.7, 3796.0], [36.8, 3796.0], [36.9, 3796.0], [37.0, 3810.0], [37.1, 3810.0], [37.2, 3810.0], [37.3, 3810.0], [37.4, 3813.0], [37.5, 3813.0], [37.6, 3813.0], [37.7, 3819.0], [37.8, 3819.0], [37.9, 3819.0], [38.0, 3851.0], [38.1, 3851.0], [38.2, 3851.0], [38.3, 3851.0], [38.4, 3853.0], [38.5, 3853.0], [38.6, 3853.0], [38.7, 3865.0], [38.8, 3865.0], [38.9, 3865.0], [39.0, 3877.0], [39.1, 3877.0], [39.2, 3877.0], [39.3, 3877.0], [39.4, 3989.0], [39.5, 3989.0], [39.6, 3989.0], [39.7, 4025.0], [39.8, 4025.0], [39.9, 4025.0], [40.0, 4025.0], [40.1, 4054.0], [40.2, 4054.0], [40.3, 4054.0], [40.4, 4109.0], [40.5, 4109.0], [40.6, 4109.0], [40.7, 4144.0], [40.8, 4144.0], [40.9, 4144.0], [41.0, 4144.0], [41.1, 4147.0], [41.2, 4147.0], [41.3, 4147.0], [41.4, 4180.0], [41.5, 4180.0], [41.6, 4180.0], [41.7, 4187.0], [41.8, 4187.0], [41.9, 4187.0], [42.0, 4187.0], [42.1, 4192.0], [42.2, 4192.0], [42.3, 4192.0], [42.4, 4198.0], [42.5, 4198.0], [42.6, 4198.0], [42.7, 4200.0], [42.8, 4200.0], [42.9, 4200.0], [43.0, 4200.0], [43.1, 4330.0], [43.2, 4330.0], [43.3, 4330.0], [43.4, 4360.0], [43.5, 4360.0], [43.6, 4360.0], [43.7, 4363.0], [43.8, 4363.0], [43.9, 4363.0], [44.0, 4363.0], [44.1, 4393.0], [44.2, 4393.0], [44.3, 4393.0], [44.4, 4430.0], [44.5, 4430.0], [44.6, 4430.0], [44.7, 4450.0], [44.8, 4450.0], [44.9, 4450.0], [45.0, 4450.0], [45.1, 4475.0], [45.2, 4475.0], [45.3, 4475.0], [45.4, 4519.0], [45.5, 4519.0], [45.6, 4519.0], [45.7, 4525.0], [45.8, 4525.0], [45.9, 4525.0], [46.0, 4525.0], [46.1, 4545.0], [46.2, 4545.0], [46.3, 4545.0], [46.4, 4549.0], [46.5, 4549.0], [46.6, 4549.0], [46.7, 4589.0], [46.8, 4589.0], [46.9, 4589.0], [47.0, 4589.0], [47.1, 4620.0], [47.2, 4620.0], [47.3, 4620.0], [47.4, 4626.0], [47.5, 4626.0], [47.6, 4626.0], [47.7, 4655.0], [47.8, 4655.0], [47.9, 4655.0], [48.0, 4655.0], [48.1, 4669.0], [48.2, 4669.0], [48.3, 4669.0], [48.4, 4671.0], [48.5, 4671.0], [48.6, 4671.0], [48.7, 4756.0], [48.8, 4756.0], [48.9, 4756.0], [49.0, 4756.0], [49.1, 4841.0], [49.2, 4841.0], [49.3, 4841.0], [49.4, 4860.0], [49.5, 4860.0], [49.6, 4860.0], [49.7, 4866.0], [49.8, 4866.0], [49.9, 4866.0], [50.0, 4866.0], [50.1, 4887.0], [50.2, 4887.0], [50.3, 4887.0], [50.4, 4929.0], [50.5, 4929.0], [50.6, 4929.0], [50.7, 4935.0], [50.8, 4935.0], [50.9, 4935.0], [51.0, 4935.0], [51.1, 4948.0], [51.2, 4948.0], [51.3, 4948.0], [51.4, 4958.0], [51.5, 4958.0], [51.6, 4958.0], [51.7, 4960.0], [51.8, 4960.0], [51.9, 4960.0], [52.0, 4960.0], [52.1, 4984.0], [52.2, 4984.0], [52.3, 4984.0], [52.4, 4991.0], [52.5, 4991.0], [52.6, 4991.0], [52.7, 4992.0], [52.8, 4992.0], [52.9, 4992.0], [53.0, 4992.0], [53.1, 5038.0], [53.2, 5038.0], [53.3, 5038.0], [53.4, 5079.0], [53.5, 5079.0], [53.6, 5079.0], [53.7, 5120.0], [53.8, 5120.0], [53.9, 5120.0], [54.0, 5120.0], [54.1, 5178.0], [54.2, 5178.0], [54.3, 5178.0], [54.4, 5196.0], [54.5, 5196.0], [54.6, 5196.0], [54.7, 5211.0], [54.8, 5211.0], [54.9, 5211.0], [55.0, 5211.0], [55.1, 5233.0], [55.2, 5233.0], [55.3, 5233.0], [55.4, 5249.0], [55.5, 5249.0], [55.6, 5249.0], [55.7, 5265.0], [55.8, 5265.0], [55.9, 5265.0], [56.0, 5265.0], [56.1, 5291.0], [56.2, 5291.0], [56.3, 5291.0], [56.4, 5344.0], [56.5, 5344.0], [56.6, 5344.0], [56.7, 5429.0], [56.8, 5429.0], [56.9, 5429.0], [57.0, 5429.0], [57.1, 5464.0], [57.2, 5464.0], [57.3, 5464.0], [57.4, 5486.0], [57.5, 5486.0], [57.6, 5486.0], [57.7, 5505.0], [57.8, 5505.0], [57.9, 5505.0], [58.0, 5505.0], [58.1, 5608.0], [58.2, 5608.0], [58.3, 5608.0], [58.4, 5651.0], [58.5, 5651.0], [58.6, 5651.0], [58.7, 5710.0], [58.8, 5710.0], [58.9, 5710.0], [59.0, 5710.0], [59.1, 5732.0], [59.2, 5732.0], [59.3, 5732.0], [59.4, 5780.0], [59.5, 5780.0], [59.6, 5780.0], [59.7, 5826.0], [59.8, 5826.0], [59.9, 5826.0], [60.0, 5826.0], [60.1, 5833.0], [60.2, 5833.0], [60.3, 5833.0], [60.4, 5892.0], [60.5, 5892.0], [60.6, 5892.0], [60.7, 5974.0], [60.8, 5974.0], [60.9, 5974.0], [61.0, 5974.0], [61.1, 5998.0], [61.2, 5998.0], [61.3, 5998.0], [61.4, 6000.0], [61.5, 6000.0], [61.6, 6000.0], [61.7, 6033.0], [61.8, 6033.0], [61.9, 6033.0], [62.0, 6033.0], [62.1, 6036.0], [62.2, 6036.0], [62.3, 6036.0], [62.4, 6083.0], [62.5, 6083.0], [62.6, 6083.0], [62.7, 6211.0], [62.8, 6211.0], [62.9, 6211.0], [63.0, 6211.0], [63.1, 6218.0], [63.2, 6218.0], [63.3, 6218.0], [63.4, 6282.0], [63.5, 6282.0], [63.6, 6282.0], [63.7, 6333.0], [63.8, 6333.0], [63.9, 6333.0], [64.0, 6333.0], [64.1, 6362.0], [64.2, 6362.0], [64.3, 6362.0], [64.4, 6422.0], [64.5, 6422.0], [64.6, 6422.0], [64.7, 6499.0], [64.8, 6499.0], [64.9, 6499.0], [65.0, 6499.0], [65.1, 6540.0], [65.2, 6540.0], [65.3, 6540.0], [65.4, 6549.0], [65.5, 6549.0], [65.6, 6549.0], [65.7, 6574.0], [65.8, 6574.0], [65.9, 6574.0], [66.0, 6574.0], [66.1, 6602.0], [66.2, 6602.0], [66.3, 6602.0], [66.4, 6604.0], [66.5, 6604.0], [66.6, 6604.0], [66.7, 6792.0], [66.8, 6792.0], [66.9, 6792.0], [67.0, 6792.0], [67.1, 6835.0], [67.2, 6835.0], [67.3, 6835.0], [67.4, 6839.0], [67.5, 6839.0], [67.6, 6839.0], [67.7, 6852.0], [67.8, 6852.0], [67.9, 6852.0], [68.0, 6852.0], [68.1, 6896.0], [68.2, 6896.0], [68.3, 6896.0], [68.4, 6942.0], [68.5, 6942.0], [68.6, 6942.0], [68.7, 6965.0], [68.8, 6965.0], [68.9, 6965.0], [69.0, 6965.0], [69.1, 7026.0], [69.2, 7026.0], [69.3, 7026.0], [69.4, 7074.0], [69.5, 7074.0], [69.6, 7074.0], [69.7, 7094.0], [69.8, 7094.0], [69.9, 7094.0], [70.0, 7094.0], [70.1, 7101.0], [70.2, 7101.0], [70.3, 7101.0], [70.4, 7119.0], [70.5, 7119.0], [70.6, 7119.0], [70.7, 7221.0], [70.8, 7221.0], [70.9, 7221.0], [71.0, 7221.0], [71.1, 7260.0], [71.2, 7260.0], [71.3, 7260.0], [71.4, 7281.0], [71.5, 7281.0], [71.6, 7281.0], [71.7, 7338.0], [71.8, 7338.0], [71.9, 7338.0], [72.0, 7338.0], [72.1, 7452.0], [72.2, 7452.0], [72.3, 7452.0], [72.4, 7474.0], [72.5, 7474.0], [72.6, 7474.0], [72.7, 7485.0], [72.8, 7485.0], [72.9, 7485.0], [73.0, 7485.0], [73.1, 7495.0], [73.2, 7495.0], [73.3, 7495.0], [73.4, 7498.0], [73.5, 7498.0], [73.6, 7498.0], [73.7, 7508.0], [73.8, 7508.0], [73.9, 7508.0], [74.0, 7508.0], [74.1, 7514.0], [74.2, 7514.0], [74.3, 7514.0], [74.4, 7536.0], [74.5, 7536.0], [74.6, 7536.0], [74.7, 7538.0], [74.8, 7538.0], [74.9, 7538.0], [75.0, 7538.0], [75.1, 7564.0], [75.2, 7564.0], [75.3, 7564.0], [75.4, 7591.0], [75.5, 7591.0], [75.6, 7591.0], [75.7, 7631.0], [75.8, 7631.0], [75.9, 7631.0], [76.0, 7667.0], [76.1, 7667.0], [76.2, 7667.0], [76.3, 7667.0], [76.4, 7684.0], [76.5, 7684.0], [76.6, 7684.0], [76.7, 7738.0], [76.8, 7738.0], [76.9, 7738.0], [77.0, 7754.0], [77.1, 7754.0], [77.2, 7754.0], [77.3, 7754.0], [77.4, 7759.0], [77.5, 7759.0], [77.6, 7759.0], [77.7, 7782.0], [77.8, 7782.0], [77.9, 7782.0], [78.0, 7919.0], [78.1, 7919.0], [78.2, 7919.0], [78.3, 7919.0], [78.4, 8027.0], [78.5, 8027.0], [78.6, 8027.0], [78.7, 8046.0], [78.8, 8046.0], [78.9, 8046.0], [79.0, 8076.0], [79.1, 8076.0], [79.2, 8076.0], [79.3, 8076.0], [79.4, 8100.0], [79.5, 8100.0], [79.6, 8100.0], [79.7, 8116.0], [79.8, 8116.0], [79.9, 8116.0], [80.0, 8143.0], [80.1, 8143.0], [80.2, 8143.0], [80.3, 8143.0], [80.4, 8154.0], [80.5, 8154.0], [80.6, 8154.0], [80.7, 8162.0], [80.8, 8162.0], [80.9, 8162.0], [81.0, 8173.0], [81.1, 8173.0], [81.2, 8173.0], [81.3, 8173.0], [81.4, 8196.0], [81.5, 8196.0], [81.6, 8196.0], [81.7, 8197.0], [81.8, 8197.0], [81.9, 8197.0], [82.0, 8197.0], [82.1, 8197.0], [82.2, 8197.0], [82.3, 8197.0], [82.4, 8206.0], [82.5, 8206.0], [82.6, 8206.0], [82.7, 8234.0], [82.8, 8234.0], [82.9, 8234.0], [83.0, 8236.0], [83.1, 8236.0], [83.2, 8236.0], [83.3, 8236.0], [83.4, 8267.0], [83.5, 8267.0], [83.6, 8267.0], [83.7, 8279.0], [83.8, 8279.0], [83.9, 8279.0], [84.0, 8286.0], [84.1, 8286.0], [84.2, 8286.0], [84.3, 8286.0], [84.4, 8300.0], [84.5, 8300.0], [84.6, 8300.0], [84.7, 8311.0], [84.8, 8311.0], [84.9, 8311.0], [85.0, 8350.0], [85.1, 8350.0], [85.2, 8350.0], [85.3, 8350.0], [85.4, 8353.0], [85.5, 8353.0], [85.6, 8353.0], [85.7, 8411.0], [85.8, 8411.0], [85.9, 8411.0], [86.0, 8413.0], [86.1, 8413.0], [86.2, 8413.0], [86.3, 8413.0], [86.4, 8426.0], [86.5, 8426.0], [86.6, 8426.0], [86.7, 8427.0], [86.8, 8427.0], [86.9, 8427.0], [87.0, 8448.0], [87.1, 8448.0], [87.2, 8448.0], [87.3, 8448.0], [87.4, 8453.0], [87.5, 8453.0], [87.6, 8453.0], [87.7, 8460.0], [87.8, 8460.0], [87.9, 8460.0], [88.0, 8471.0], [88.1, 8471.0], [88.2, 8471.0], [88.3, 8471.0], [88.4, 8473.0], [88.5, 8473.0], [88.6, 8473.0], [88.7, 8481.0], [88.8, 8481.0], [88.9, 8481.0], [89.0, 8482.0], [89.1, 8482.0], [89.2, 8482.0], [89.3, 8482.0], [89.4, 8492.0], [89.5, 8492.0], [89.6, 8492.0], [89.7, 8511.0], [89.8, 8511.0], [89.9, 8511.0], [90.0, 8514.0], [90.1, 8514.0], [90.2, 8514.0], [90.3, 8514.0], [90.4, 8517.0], [90.5, 8517.0], [90.6, 8517.0], [90.7, 8529.0], [90.8, 8529.0], [90.9, 8529.0], [91.0, 8533.0], [91.1, 8533.0], [91.2, 8533.0], [91.3, 8533.0], [91.4, 8539.0], [91.5, 8539.0], [91.6, 8539.0], [91.7, 8550.0], [91.8, 8550.0], [91.9, 8550.0], [92.0, 8608.0], [92.1, 8608.0], [92.2, 8608.0], [92.3, 8608.0], [92.4, 8765.0], [92.5, 8765.0], [92.6, 8765.0], [92.7, 8784.0], [92.8, 8784.0], [92.9, 8784.0], [93.0, 8972.0], [93.1, 8972.0], [93.2, 8972.0], [93.3, 8972.0], [93.4, 9104.0], [93.5, 9104.0], [93.6, 9104.0], [93.7, 9167.0], [93.8, 9167.0], [93.9, 9167.0], [94.0, 9768.0], [94.1, 9768.0], [94.2, 9768.0], [94.3, 9768.0], [94.4, 9797.0], [94.5, 9797.0], [94.6, 9797.0], [94.7, 9954.0], [94.8, 9954.0], [94.9, 9954.0], [95.0, 10131.0], [95.1, 10131.0], [95.2, 10131.0], [95.3, 10131.0], [95.4, 10266.0], [95.5, 10266.0], [95.6, 10266.0], [95.7, 10267.0], [95.8, 10267.0], [95.9, 10267.0], [96.0, 10481.0], [96.1, 10481.0], [96.2, 10481.0], [96.3, 10481.0], [96.4, 10517.0], [96.5, 10517.0], [96.6, 10517.0], [96.7, 10520.0], [96.8, 10520.0], [96.9, 10520.0], [97.0, 10550.0], [97.1, 10550.0], [97.2, 10550.0], [97.3, 10550.0], [97.4, 10734.0], [97.5, 10734.0], [97.6, 10734.0], [97.7, 11029.0], [97.8, 11029.0], [97.9, 11029.0], [98.0, 11081.0], [98.1, 11081.0], [98.2, 11081.0], [98.3, 11081.0], [98.4, 11094.0], [98.5, 11094.0], [98.6, 11094.0], [98.7, 11095.0], [98.8, 11095.0], [98.9, 11095.0], [99.0, 11096.0], [99.1, 11096.0], [99.2, 11096.0], [99.3, 11096.0], [99.4, 11129.0], [99.5, 11129.0], [99.6, 11129.0], [99.7, 11200.0], [99.8, 11200.0], [99.9, 11200.0]], "isOverall": false, "label": "300 acessos", "isController": false}, {"data": [[0.0, 374.0], [0.1, 374.0], [0.2, 374.0], [0.3, 374.0], [0.4, 385.0], [0.5, 385.0], [0.6, 385.0], [0.7, 398.0], [0.8, 398.0], [0.9, 398.0], [1.0, 405.0], [1.1, 405.0], [1.2, 405.0], [1.3, 405.0], [1.4, 463.0], [1.5, 463.0], [1.6, 463.0], [1.7, 472.0], [1.8, 472.0], [1.9, 472.0], [2.0, 495.0], [2.1, 495.0], [2.2, 495.0], [2.3, 495.0], [2.4, 500.0], [2.5, 500.0], [2.6, 500.0], [2.7, 509.0], [2.8, 509.0], [2.9, 509.0], [3.0, 514.0], [3.1, 514.0], [3.2, 514.0], [3.3, 514.0], [3.4, 543.0], [3.5, 543.0], [3.6, 543.0], [3.7, 543.0], [3.8, 543.0], [3.9, 543.0], [4.0, 546.0], [4.1, 546.0], [4.2, 546.0], [4.3, 546.0], [4.4, 549.0], [4.5, 549.0], [4.6, 549.0], [4.7, 599.0], [4.8, 599.0], [4.9, 599.0], [5.0, 611.0], [5.1, 611.0], [5.2, 611.0], [5.3, 611.0], [5.4, 611.0], [5.5, 611.0], [5.6, 611.0], [5.7, 624.0], [5.8, 624.0], [5.9, 624.0], [6.0, 646.0], [6.1, 646.0], [6.2, 646.0], [6.3, 646.0], [6.4, 668.0], [6.5, 668.0], [6.6, 668.0], [6.7, 669.0], [6.8, 669.0], [6.9, 669.0], [7.0, 674.0], [7.1, 674.0], [7.2, 674.0], [7.3, 674.0], [7.4, 703.0], [7.5, 703.0], [7.6, 703.0], [7.7, 717.0], [7.8, 717.0], [7.9, 717.0], [8.0, 743.0], [8.1, 743.0], [8.2, 743.0], [8.3, 743.0], [8.4, 788.0], [8.5, 788.0], [8.6, 788.0], [8.7, 796.0], [8.8, 796.0], [8.9, 796.0], [9.0, 821.0], [9.1, 821.0], [9.2, 821.0], [9.3, 821.0], [9.4, 829.0], [9.5, 829.0], [9.6, 829.0], [9.7, 850.0], [9.8, 850.0], [9.9, 850.0], [10.0, 861.0], [10.1, 861.0], [10.2, 861.0], [10.3, 861.0], [10.4, 894.0], [10.5, 894.0], [10.6, 894.0], [10.7, 906.0], [10.8, 906.0], [10.9, 906.0], [11.0, 906.0], [11.1, 924.0], [11.2, 924.0], [11.3, 924.0], [11.4, 948.0], [11.5, 948.0], [11.6, 948.0], [11.7, 992.0], [11.8, 992.0], [11.9, 992.0], [12.0, 992.0], [12.1, 1019.0], [12.2, 1019.0], [12.3, 1019.0], [12.4, 1086.0], [12.5, 1086.0], [12.6, 1086.0], [12.7, 1110.0], [12.8, 1110.0], [12.9, 1110.0], [13.0, 1110.0], [13.1, 1116.0], [13.2, 1116.0], [13.3, 1116.0], [13.4, 1121.0], [13.5, 1121.0], [13.6, 1121.0], [13.7, 1169.0], [13.8, 1169.0], [13.9, 1169.0], [14.0, 1169.0], [14.1, 1180.0], [14.2, 1180.0], [14.3, 1180.0], [14.4, 1193.0], [14.5, 1193.0], [14.6, 1193.0], [14.7, 1198.0], [14.8, 1198.0], [14.9, 1198.0], [15.0, 1198.0], [15.1, 1222.0], [15.2, 1222.0], [15.3, 1222.0], [15.4, 1226.0], [15.5, 1226.0], [15.6, 1226.0], [15.7, 1255.0], [15.8, 1255.0], [15.9, 1255.0], [16.0, 1255.0], [16.1, 1261.0], [16.2, 1261.0], [16.3, 1261.0], [16.4, 1332.0], [16.5, 1332.0], [16.6, 1332.0], [16.7, 1334.0], [16.8, 1334.0], [16.9, 1334.0], [17.0, 1334.0], [17.1, 1364.0], [17.2, 1364.0], [17.3, 1364.0], [17.4, 1385.0], [17.5, 1385.0], [17.6, 1385.0], [17.7, 1389.0], [17.8, 1389.0], [17.9, 1389.0], [18.0, 1389.0], [18.1, 1407.0], [18.2, 1407.0], [18.3, 1407.0], [18.4, 1436.0], [18.5, 1436.0], [18.6, 1436.0], [18.7, 1438.0], [18.8, 1438.0], [18.9, 1438.0], [19.0, 1457.0], [19.1, 1457.0], [19.2, 1457.0], [19.3, 1457.0], [19.4, 1489.0], [19.5, 1489.0], [19.6, 1489.0], [19.7, 1490.0], [19.8, 1490.0], [19.9, 1490.0], [20.0, 1493.0], [20.1, 1493.0], [20.2, 1493.0], [20.3, 1493.0], [20.4, 1542.0], [20.5, 1542.0], [20.6, 1542.0], [20.7, 1549.0], [20.8, 1549.0], [20.9, 1549.0], [21.0, 1592.0], [21.1, 1592.0], [21.2, 1592.0], [21.3, 1592.0], [21.4, 1610.0], [21.5, 1610.0], [21.6, 1610.0], [21.7, 1664.0], [21.8, 1664.0], [21.9, 1664.0], [22.0, 1699.0], [22.1, 1699.0], [22.2, 1699.0], [22.3, 1699.0], [22.4, 1701.0], [22.5, 1701.0], [22.6, 1701.0], [22.7, 1728.0], [22.8, 1728.0], [22.9, 1728.0], [23.0, 1769.0], [23.1, 1769.0], [23.2, 1769.0], [23.3, 1769.0], [23.4, 1772.0], [23.5, 1772.0], [23.6, 1772.0], [23.7, 1772.0], [23.8, 1772.0], [23.9, 1772.0], [24.0, 1820.0], [24.1, 1820.0], [24.2, 1820.0], [24.3, 1820.0], [24.4, 1820.0], [24.5, 1820.0], [24.6, 1820.0], [24.7, 1827.0], [24.8, 1827.0], [24.9, 1827.0], [25.0, 1864.0], [25.1, 1864.0], [25.2, 1864.0], [25.3, 1864.0], [25.4, 1867.0], [25.5, 1867.0], [25.6, 1867.0], [25.7, 1868.0], [25.8, 1868.0], [25.9, 1868.0], [26.0, 1892.0], [26.1, 1892.0], [26.2, 1892.0], [26.3, 1892.0], [26.4, 1903.0], [26.5, 1903.0], [26.6, 1903.0], [26.7, 1975.0], [26.8, 1975.0], [26.9, 1975.0], [27.0, 2004.0], [27.1, 2004.0], [27.2, 2004.0], [27.3, 2004.0], [27.4, 2038.0], [27.5, 2038.0], [27.6, 2038.0], [27.7, 2042.0], [27.8, 2042.0], [27.9, 2042.0], [28.0, 2048.0], [28.1, 2048.0], [28.2, 2048.0], [28.3, 2048.0], [28.4, 2086.0], [28.5, 2086.0], [28.6, 2086.0], [28.7, 2090.0], [28.8, 2090.0], [28.9, 2090.0], [29.0, 2116.0], [29.1, 2116.0], [29.2, 2116.0], [29.3, 2116.0], [29.4, 2131.0], [29.5, 2131.0], [29.6, 2131.0], [29.7, 2170.0], [29.8, 2170.0], [29.9, 2170.0], [30.0, 2199.0], [30.1, 2199.0], [30.2, 2199.0], [30.3, 2199.0], [30.4, 2251.0], [30.5, 2251.0], [30.6, 2251.0], [30.7, 2265.0], [30.8, 2265.0], [30.9, 2265.0], [31.0, 2271.0], [31.1, 2271.0], [31.2, 2271.0], [31.3, 2271.0], [31.4, 2338.0], [31.5, 2338.0], [31.6, 2338.0], [31.7, 2380.0], [31.8, 2380.0], [31.9, 2380.0], [32.0, 2382.0], [32.1, 2382.0], [32.2, 2382.0], [32.3, 2382.0], [32.4, 2436.0], [32.5, 2436.0], [32.6, 2436.0], [32.7, 2466.0], [32.8, 2466.0], [32.9, 2466.0], [33.0, 2466.0], [33.1, 2466.0], [33.2, 2466.0], [33.3, 2466.0], [33.4, 2496.0], [33.5, 2496.0], [33.6, 2496.0], [33.7, 2499.0], [33.8, 2499.0], [33.9, 2499.0], [34.0, 2517.0], [34.1, 2517.0], [34.2, 2517.0], [34.3, 2517.0], [34.4, 2524.0], [34.5, 2524.0], [34.6, 2524.0], [34.7, 2585.0], [34.8, 2585.0], [34.9, 2585.0], [35.0, 2617.0], [35.1, 2617.0], [35.2, 2617.0], [35.3, 2617.0], [35.4, 2660.0], [35.5, 2660.0], [35.6, 2660.0], [35.7, 2665.0], [35.8, 2665.0], [35.9, 2665.0], [36.0, 2698.0], [36.1, 2698.0], [36.2, 2698.0], [36.3, 2698.0], [36.4, 2711.0], [36.5, 2711.0], [36.6, 2711.0], [36.7, 2722.0], [36.8, 2722.0], [36.9, 2722.0], [37.0, 2728.0], [37.1, 2728.0], [37.2, 2728.0], [37.3, 2728.0], [37.4, 2757.0], [37.5, 2757.0], [37.6, 2757.0], [37.7, 2757.0], [37.8, 2757.0], [37.9, 2757.0], [38.0, 2773.0], [38.1, 2773.0], [38.2, 2773.0], [38.3, 2773.0], [38.4, 2821.0], [38.5, 2821.0], [38.6, 2821.0], [38.7, 2823.0], [38.8, 2823.0], [38.9, 2823.0], [39.0, 2859.0], [39.1, 2859.0], [39.2, 2859.0], [39.3, 2859.0], [39.4, 2869.0], [39.5, 2869.0], [39.6, 2869.0], [39.7, 2917.0], [39.8, 2917.0], [39.9, 2917.0], [40.0, 2924.0], [40.1, 2924.0], [40.2, 2924.0], [40.3, 2924.0], [40.4, 2926.0], [40.5, 2926.0], [40.6, 2926.0], [40.7, 2953.0], [40.8, 2953.0], [40.9, 2953.0], [41.0, 2953.0], [41.1, 2954.0], [41.2, 2954.0], [41.3, 2954.0], [41.4, 2958.0], [41.5, 2958.0], [41.6, 2958.0], [41.7, 3009.0], [41.8, 3009.0], [41.9, 3009.0], [42.0, 3009.0], [42.1, 3043.0], [42.2, 3043.0], [42.3, 3043.0], [42.4, 3063.0], [42.5, 3063.0], [42.6, 3063.0], [42.7, 3067.0], [42.8, 3067.0], [42.9, 3067.0], [43.0, 3067.0], [43.1, 3108.0], [43.2, 3108.0], [43.3, 3108.0], [43.4, 3109.0], [43.5, 3109.0], [43.6, 3109.0], [43.7, 3190.0], [43.8, 3190.0], [43.9, 3190.0], [44.0, 3190.0], [44.1, 3202.0], [44.2, 3202.0], [44.3, 3202.0], [44.4, 3206.0], [44.5, 3206.0], [44.6, 3206.0], [44.7, 3227.0], [44.8, 3227.0], [44.9, 3227.0], [45.0, 3227.0], [45.1, 3293.0], [45.2, 3293.0], [45.3, 3293.0], [45.4, 3332.0], [45.5, 3332.0], [45.6, 3332.0], [45.7, 3332.0], [45.8, 3332.0], [45.9, 3332.0], [46.0, 3332.0], [46.1, 3373.0], [46.2, 3373.0], [46.3, 3373.0], [46.4, 3377.0], [46.5, 3377.0], [46.6, 3377.0], [46.7, 3474.0], [46.8, 3474.0], [46.9, 3474.0], [47.0, 3474.0], [47.1, 3491.0], [47.2, 3491.0], [47.3, 3491.0], [47.4, 3497.0], [47.5, 3497.0], [47.6, 3497.0], [47.7, 3546.0], [47.8, 3546.0], [47.9, 3546.0], [48.0, 3546.0], [48.1, 3626.0], [48.2, 3626.0], [48.3, 3626.0], [48.4, 3630.0], [48.5, 3630.0], [48.6, 3630.0], [48.7, 3702.0], [48.8, 3702.0], [48.9, 3702.0], [49.0, 3702.0], [49.1, 3726.0], [49.2, 3726.0], [49.3, 3726.0], [49.4, 3738.0], [49.5, 3738.0], [49.6, 3738.0], [49.7, 3743.0], [49.8, 3743.0], [49.9, 3743.0], [50.0, 3743.0], [50.1, 3826.0], [50.2, 3826.0], [50.3, 3826.0], [50.4, 3828.0], [50.5, 3828.0], [50.6, 3828.0], [50.7, 3845.0], [50.8, 3845.0], [50.9, 3845.0], [51.0, 3845.0], [51.1, 3850.0], [51.2, 3850.0], [51.3, 3850.0], [51.4, 3855.0], [51.5, 3855.0], [51.6, 3855.0], [51.7, 3864.0], [51.8, 3864.0], [51.9, 3864.0], [52.0, 3864.0], [52.1, 3869.0], [52.2, 3869.0], [52.3, 3869.0], [52.4, 3921.0], [52.5, 3921.0], [52.6, 3921.0], [52.7, 3932.0], [52.8, 3932.0], [52.9, 3932.0], [53.0, 3932.0], [53.1, 3938.0], [53.2, 3938.0], [53.3, 3938.0], [53.4, 3974.0], [53.5, 3974.0], [53.6, 3974.0], [53.7, 4043.0], [53.8, 4043.0], [53.9, 4043.0], [54.0, 4043.0], [54.1, 4054.0], [54.2, 4054.0], [54.3, 4054.0], [54.4, 4058.0], [54.5, 4058.0], [54.6, 4058.0], [54.7, 4112.0], [54.8, 4112.0], [54.9, 4112.0], [55.0, 4112.0], [55.1, 4146.0], [55.2, 4146.0], [55.3, 4146.0], [55.4, 4146.0], [55.5, 4146.0], [55.6, 4146.0], [55.7, 4158.0], [55.8, 4158.0], [55.9, 4158.0], [56.0, 4158.0], [56.1, 4170.0], [56.2, 4170.0], [56.3, 4170.0], [56.4, 4186.0], [56.5, 4186.0], [56.6, 4186.0], [56.7, 4190.0], [56.8, 4190.0], [56.9, 4190.0], [57.0, 4190.0], [57.1, 4210.0], [57.2, 4210.0], [57.3, 4210.0], [57.4, 4229.0], [57.5, 4229.0], [57.6, 4229.0], [57.7, 4310.0], [57.8, 4310.0], [57.9, 4310.0], [58.0, 4310.0], [58.1, 4327.0], [58.2, 4327.0], [58.3, 4327.0], [58.4, 4328.0], [58.5, 4328.0], [58.6, 4328.0], [58.7, 4328.0], [58.8, 4328.0], [58.9, 4328.0], [59.0, 4328.0], [59.1, 4384.0], [59.2, 4384.0], [59.3, 4384.0], [59.4, 4402.0], [59.5, 4402.0], [59.6, 4402.0], [59.7, 4407.0], [59.8, 4407.0], [59.9, 4407.0], [60.0, 4407.0], [60.1, 4444.0], [60.2, 4444.0], [60.3, 4444.0], [60.4, 4458.0], [60.5, 4458.0], [60.6, 4458.0], [60.7, 4464.0], [60.8, 4464.0], [60.9, 4464.0], [61.0, 4464.0], [61.1, 4485.0], [61.2, 4485.0], [61.3, 4485.0], [61.4, 4518.0], [61.5, 4518.0], [61.6, 4518.0], [61.7, 4522.0], [61.8, 4522.0], [61.9, 4522.0], [62.0, 4522.0], [62.1, 4527.0], [62.2, 4527.0], [62.3, 4527.0], [62.4, 4544.0], [62.5, 4544.0], [62.6, 4544.0], [62.7, 4551.0], [62.8, 4551.0], [62.9, 4551.0], [63.0, 4551.0], [63.1, 4564.0], [63.2, 4564.0], [63.3, 4564.0], [63.4, 4596.0], [63.5, 4596.0], [63.6, 4596.0], [63.7, 4597.0], [63.8, 4597.0], [63.9, 4597.0], [64.0, 4597.0], [64.1, 4633.0], [64.2, 4633.0], [64.3, 4633.0], [64.4, 4638.0], [64.5, 4638.0], [64.6, 4638.0], [64.7, 4643.0], [64.8, 4643.0], [64.9, 4643.0], [65.0, 4643.0], [65.1, 4660.0], [65.2, 4660.0], [65.3, 4660.0], [65.4, 4664.0], [65.5, 4664.0], [65.6, 4664.0], [65.7, 4712.0], [65.8, 4712.0], [65.9, 4712.0], [66.0, 4712.0], [66.1, 4731.0], [66.2, 4731.0], [66.3, 4731.0], [66.4, 4768.0], [66.5, 4768.0], [66.6, 4768.0], [66.7, 4775.0], [66.8, 4775.0], [66.9, 4775.0], [67.0, 4775.0], [67.1, 4788.0], [67.2, 4788.0], [67.3, 4788.0], [67.4, 4796.0], [67.5, 4796.0], [67.6, 4796.0], [67.7, 4871.0], [67.8, 4871.0], [67.9, 4871.0], [68.0, 4871.0], [68.1, 4911.0], [68.2, 4911.0], [68.3, 4911.0], [68.4, 4912.0], [68.5, 4912.0], [68.6, 4912.0], [68.7, 4925.0], [68.8, 4925.0], [68.9, 4925.0], [69.0, 4925.0], [69.1, 4939.0], [69.2, 4939.0], [69.3, 4939.0], [69.4, 4951.0], [69.5, 4951.0], [69.6, 4951.0], [69.7, 4956.0], [69.8, 4956.0], [69.9, 4956.0], [70.0, 4956.0], [70.1, 4959.0], [70.2, 4959.0], [70.3, 4959.0], [70.4, 4960.0], [70.5, 4960.0], [70.6, 4960.0], [70.7, 5017.0], [70.8, 5017.0], [70.9, 5017.0], [71.0, 5017.0], [71.1, 5022.0], [71.2, 5022.0], [71.3, 5022.0], [71.4, 5023.0], [71.5, 5023.0], [71.6, 5023.0], [71.7, 5024.0], [71.8, 5024.0], [71.9, 5024.0], [72.0, 5024.0], [72.1, 5025.0], [72.2, 5025.0], [72.3, 5025.0], [72.4, 5039.0], [72.5, 5039.0], [72.6, 5039.0], [72.7, 5041.0], [72.8, 5041.0], [72.9, 5041.0], [73.0, 5041.0], [73.1, 5048.0], [73.2, 5048.0], [73.3, 5048.0], [73.4, 5052.0], [73.5, 5052.0], [73.6, 5052.0], [73.7, 5080.0], [73.8, 5080.0], [73.9, 5080.0], [74.0, 5081.0], [74.1, 5081.0], [74.2, 5081.0], [74.3, 5081.0], [74.4, 5083.0], [74.5, 5083.0], [74.6, 5083.0], [74.7, 5112.0], [74.8, 5112.0], [74.9, 5112.0], [75.0, 5118.0], [75.1, 5118.0], [75.2, 5118.0], [75.3, 5118.0], [75.4, 5121.0], [75.5, 5121.0], [75.6, 5121.0], [75.7, 5126.0], [75.8, 5126.0], [75.9, 5126.0], [76.0, 5132.0], [76.1, 5132.0], [76.2, 5132.0], [76.3, 5132.0], [76.4, 5140.0], [76.5, 5140.0], [76.6, 5140.0], [76.7, 5151.0], [76.8, 5151.0], [76.9, 5151.0], [77.0, 5152.0], [77.1, 5152.0], [77.2, 5152.0], [77.3, 5152.0], [77.4, 5170.0], [77.5, 5170.0], [77.6, 5170.0], [77.7, 5178.0], [77.8, 5178.0], [77.9, 5178.0], [78.0, 5195.0], [78.1, 5195.0], [78.2, 5195.0], [78.3, 5195.0], [78.4, 5203.0], [78.5, 5203.0], [78.6, 5203.0], [78.7, 5212.0], [78.8, 5212.0], [78.9, 5212.0], [79.0, 5219.0], [79.1, 5219.0], [79.2, 5219.0], [79.3, 5219.0], [79.4, 5228.0], [79.5, 5228.0], [79.6, 5228.0], [79.7, 5289.0], [79.8, 5289.0], [79.9, 5289.0], [80.0, 5356.0], [80.1, 5356.0], [80.2, 5356.0], [80.3, 5356.0], [80.4, 5358.0], [80.5, 5358.0], [80.6, 5358.0], [80.7, 5363.0], [80.8, 5363.0], [80.9, 5363.0], [81.0, 5393.0], [81.1, 5393.0], [81.2, 5393.0], [81.3, 5393.0], [81.4, 5417.0], [81.5, 5417.0], [81.6, 5417.0], [81.7, 5458.0], [81.8, 5458.0], [81.9, 5458.0], [82.0, 5476.0], [82.1, 5476.0], [82.2, 5476.0], [82.3, 5476.0], [82.4, 5526.0], [82.5, 5526.0], [82.6, 5526.0], [82.7, 5563.0], [82.8, 5563.0], [82.9, 5563.0], [83.0, 5563.0], [83.1, 5563.0], [83.2, 5563.0], [83.3, 5563.0], [83.4, 5595.0], [83.5, 5595.0], [83.6, 5595.0], [83.7, 5668.0], [83.8, 5668.0], [83.9, 5668.0], [84.0, 5693.0], [84.1, 5693.0], [84.2, 5693.0], [84.3, 5693.0], [84.4, 5751.0], [84.5, 5751.0], [84.6, 5751.0], [84.7, 5775.0], [84.8, 5775.0], [84.9, 5775.0], [85.0, 5794.0], [85.1, 5794.0], [85.2, 5794.0], [85.3, 5794.0], [85.4, 5864.0], [85.5, 5864.0], [85.6, 5864.0], [85.7, 5864.0], [85.8, 5864.0], [85.9, 5864.0], [86.0, 5919.0], [86.1, 5919.0], [86.2, 5919.0], [86.3, 5919.0], [86.4, 5928.0], [86.5, 5928.0], [86.6, 5928.0], [86.7, 5945.0], [86.8, 5945.0], [86.9, 5945.0], [87.0, 5956.0], [87.1, 5956.0], [87.2, 5956.0], [87.3, 5956.0], [87.4, 5983.0], [87.5, 5983.0], [87.6, 5983.0], [87.7, 5990.0], [87.8, 5990.0], [87.9, 5990.0], [88.0, 5992.0], [88.1, 5992.0], [88.2, 5992.0], [88.3, 5992.0], [88.4, 5995.0], [88.5, 5995.0], [88.6, 5995.0], [88.7, 6005.0], [88.8, 6005.0], [88.9, 6005.0], [89.0, 6005.0], [89.1, 6005.0], [89.2, 6005.0], [89.3, 6005.0], [89.4, 6006.0], [89.5, 6006.0], [89.6, 6006.0], [89.7, 6022.0], [89.8, 6022.0], [89.9, 6022.0], [90.0, 6027.0], [90.1, 6027.0], [90.2, 6027.0], [90.3, 6027.0], [90.4, 6042.0], [90.5, 6042.0], [90.6, 6042.0], [90.7, 6066.0], [90.8, 6066.0], [90.9, 6066.0], [91.0, 6072.0], [91.1, 6072.0], [91.2, 6072.0], [91.3, 6072.0], [91.4, 6078.0], [91.5, 6078.0], [91.6, 6078.0], [91.7, 6102.0], [91.8, 6102.0], [91.9, 6102.0], [92.0, 6116.0], [92.1, 6116.0], [92.2, 6116.0], [92.3, 6116.0], [92.4, 6142.0], [92.5, 6142.0], [92.6, 6142.0], [92.7, 6239.0], [92.8, 6239.0], [92.9, 6239.0], [93.0, 6410.0], [93.1, 6410.0], [93.2, 6410.0], [93.3, 6410.0], [93.4, 6475.0], [93.5, 6475.0], [93.6, 6475.0], [93.7, 6508.0], [93.8, 6508.0], [93.9, 6508.0], [94.0, 6555.0], [94.1, 6555.0], [94.2, 6555.0], [94.3, 6555.0], [94.4, 6987.0], [94.5, 6987.0], [94.6, 6987.0], [94.7, 7639.0], [94.8, 7639.0], [94.9, 7639.0], [95.0, 7768.0], [95.1, 7768.0], [95.2, 7768.0], [95.3, 7768.0], [95.4, 7877.0], [95.5, 7877.0], [95.6, 7877.0], [95.7, 8146.0], [95.8, 8146.0], [95.9, 8146.0], [96.0, 8223.0], [96.1, 8223.0], [96.2, 8223.0], [96.3, 8223.0], [96.4, 8352.0], [96.5, 8352.0], [96.6, 8352.0], [96.7, 8383.0], [96.8, 8383.0], [96.9, 8383.0], [97.0, 8561.0], [97.1, 8561.0], [97.2, 8561.0], [97.3, 8561.0], [97.4, 8665.0], [97.5, 8665.0], [97.6, 8665.0], [97.7, 8673.0], [97.8, 8673.0], [97.9, 8673.0], [98.0, 8711.0], [98.1, 8711.0], [98.2, 8711.0], [98.3, 8711.0], [98.4, 8732.0], [98.5, 8732.0], [98.6, 8732.0], [98.7, 8863.0], [98.8, 8863.0], [98.9, 8863.0], [99.0, 9017.0], [99.1, 9017.0], [99.2, 9017.0], [99.3, 9017.0], [99.4, 9078.0], [99.5, 9078.0], [99.6, 9078.0], [99.7, 11574.0], [99.8, 11574.0], [99.9, 11574.0]], "isOverall": false, "label": "login", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 12.0, "series": [{"data": [[0.0, 3.0], [600.0, 1.0], [700.0, 1.0], [800.0, 1.0], [900.0, 3.0], [1000.0, 4.0], [1100.0, 5.0], [1200.0, 2.0], [1300.0, 5.0], [1400.0, 3.0], [1500.0, 3.0], [1600.0, 5.0], [1700.0, 2.0], [1800.0, 3.0], [1900.0, 7.0], [2000.0, 4.0], [2200.0, 3.0], [2300.0, 3.0], [2400.0, 4.0], [2500.0, 2.0], [2600.0, 3.0], [2700.0, 5.0], [2800.0, 2.0], [2900.0, 6.0], [3000.0, 2.0], [3300.0, 2.0], [3200.0, 4.0], [3400.0, 5.0], [3500.0, 2.0], [3700.0, 3.0], [3600.0, 4.0], [3800.0, 7.0], [3900.0, 1.0], [4000.0, 2.0], [4100.0, 7.0], [4300.0, 4.0], [4200.0, 1.0], [4600.0, 5.0], [4500.0, 5.0], [4400.0, 3.0], [4800.0, 4.0], [4700.0, 1.0], [4900.0, 8.0], [5100.0, 3.0], [5000.0, 2.0], [5200.0, 5.0], [5300.0, 1.0], [5400.0, 3.0], [5500.0, 1.0], [5600.0, 2.0], [5800.0, 3.0], [5700.0, 3.0], [5900.0, 2.0], [6000.0, 4.0], [6200.0, 3.0], [6300.0, 2.0], [6600.0, 2.0], [6500.0, 3.0], [6400.0, 2.0], [6800.0, 4.0], [6900.0, 2.0], [6700.0, 1.0], [7100.0, 2.0], [7000.0, 3.0], [7400.0, 5.0], [7200.0, 3.0], [7300.0, 1.0], [7500.0, 6.0], [7600.0, 3.0], [7700.0, 4.0], [7900.0, 1.0], [8100.0, 9.0], [8000.0, 3.0], [8200.0, 6.0], [8300.0, 4.0], [8400.0, 12.0], [8500.0, 7.0], [8700.0, 2.0], [8600.0, 1.0], [9100.0, 2.0], [8900.0, 1.0], [9700.0, 2.0], [9900.0, 1.0], [10100.0, 1.0], [10200.0, 2.0], [10400.0, 1.0], [10500.0, 3.0], [10700.0, 1.0], [11000.0, 5.0], [11200.0, 1.0], [11100.0, 1.0], [100.0, 1.0], [200.0, 2.0], [400.0, 4.0], [500.0, 2.0]], "isOverall": false, "label": "300 acessos", "isController": false}, {"data": [[600.0, 7.0], [700.0, 5.0], [800.0, 5.0], [900.0, 4.0], [1000.0, 2.0], [1100.0, 7.0], [1200.0, 4.0], [1300.0, 5.0], [1400.0, 7.0], [1500.0, 3.0], [1600.0, 3.0], [1700.0, 5.0], [1800.0, 7.0], [1900.0, 2.0], [2000.0, 6.0], [2100.0, 4.0], [2200.0, 3.0], [2300.0, 3.0], [2400.0, 5.0], [2500.0, 3.0], [2600.0, 4.0], [2700.0, 6.0], [2800.0, 4.0], [2900.0, 6.0], [3000.0, 4.0], [3100.0, 3.0], [3300.0, 4.0], [3200.0, 4.0], [3400.0, 3.0], [3500.0, 1.0], [3700.0, 4.0], [3600.0, 2.0], [3800.0, 7.0], [3900.0, 4.0], [4000.0, 3.0], [4100.0, 7.0], [4200.0, 2.0], [4300.0, 5.0], [4400.0, 6.0], [4500.0, 8.0], [4600.0, 5.0], [4700.0, 6.0], [4800.0, 1.0], [4900.0, 8.0], [5000.0, 12.0], [5100.0, 11.0], [5300.0, 4.0], [5200.0, 5.0], [5400.0, 3.0], [5500.0, 4.0], [5600.0, 2.0], [5700.0, 3.0], [5800.0, 2.0], [5900.0, 8.0], [6000.0, 9.0], [6100.0, 3.0], [6200.0, 1.0], [6500.0, 2.0], [6400.0, 2.0], [6900.0, 1.0], [7600.0, 1.0], [7700.0, 1.0], [7800.0, 1.0], [8100.0, 1.0], [8200.0, 1.0], [8700.0, 2.0], [8500.0, 1.0], [8600.0, 2.0], [8300.0, 2.0], [8800.0, 1.0], [9000.0, 2.0], [11500.0, 1.0], [300.0, 3.0], [400.0, 4.0], [500.0, 8.0]], "isOverall": false, "label": "login", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 11500.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 18.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1.500ms"], [2, "Requests having \nresponse time > 1.500ms"], [3, "Requests in error"]], "maxY": 502.0, "series": [{"data": [[0.0, 18.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 80.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1.500ms", "isController": false}, {"data": [[2.0, 502.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1.500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 141.68499999999995, "minX": 1.75432536E12, "maxY": 141.68499999999995, "series": [{"data": [[1.75432536E12, 141.68499999999995]], "isOverall": false, "label": "Consulta de pedido", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75432536E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 28.0, "minX": 1.0, "maxY": 11574.0, "series": [{"data": [[2.0, 28.0], [3.0, 239.0], [5.0, 2412.5], [6.0, 2858.0], [7.0, 1337.0], [9.0, 1979.0], [10.0, 1261.5], [11.0, 288.0], [12.0, 1837.0], [14.0, 4668.0], [15.0, 2473.0], [16.0, 2825.0], [17.0, 7684.0], [19.0, 6211.5], [21.0, 3796.0], [22.0, 3808.0], [24.0, 1151.5], [25.0, 3258.5], [26.0, 469.5], [27.0, 4935.0], [28.0, 3127.0], [30.0, 1443.0], [31.0, 4298.0], [33.0, 1480.0], [32.0, 7101.0], [35.0, 1947.0], [34.0, 5079.0], [37.0, 2294.0], [36.0, 526.0], [39.0, 7074.0], [38.0, 456.0], [40.0, 1403.0], [41.0, 2998.0], [42.0, 2937.0], [45.0, 826.0], [44.0, 2804.5], [46.0, 4262.0], [47.0, 3647.0], [49.0, 2994.0], [48.0, 4025.0], [50.0, 2394.0], [53.0, 3221.0], [52.0, 3015.5], [54.0, 2764.0], [56.0, 5955.0], [58.0, 3611.5], [61.0, 1958.5], [60.0, 3649.0], [63.0, 3989.0], [62.0, 4545.0], [67.0, 2449.6666666666665], [66.0, 4537.0], [64.0, 3295.0], [69.0, 4591.0], [71.0, 3256.5], [70.0, 879.0], [73.0, 2281.0], [72.0, 2372.6666666666665], [74.0, 4192.0], [78.0, 4198.0], [77.0, 4525.0], [76.0, 4660.0], [80.0, 1558.0], [83.0, 5291.0], [82.0, 5120.0], [81.0, 4569.666666666667], [84.0, 1628.5], [87.0, 8765.0], [86.0, 5429.0], [85.0, 7217.5], [91.0, 1404.0], [88.0, 5249.0], [92.0, 5679.6], [95.0, 6033.0], [94.0, 5833.0], [93.0, 5974.0], [96.0, 2327.6], [97.0, 5851.666666666667], [98.0, 997.0], [103.0, 6282.0], [102.0, 6333.0], [101.0, 6422.0], [100.0, 3692.5], [107.0, 1353.0], [106.0, 6540.0], [105.0, 1131.0], [104.0, 6499.0], [108.0, 3904.0], [111.0, 6835.0], [110.0, 1177.0], [109.0, 6852.0], [113.0, 4385.0], [115.0, 9768.0], [114.0, 7026.0], [112.0, 6792.0], [118.0, 2479.5], [119.0, 1385.0], [117.0, 6942.0], [116.0, 5486.0], [123.0, 7281.0], [122.0, 9797.0], [121.0, 1657.0], [120.0, 1810.0], [126.0, 4677.0], [127.0, 1971.0], [125.0, 7221.0], [124.0, 1784.0], [134.0, 6602.0], [133.0, 2720.0], [132.0, 10267.0], [131.0, 10266.0], [130.0, 2651.0], [129.0, 3038.0], [128.0, 7260.0], [136.0, 4426.5], [137.0, 4865.0], [138.0, 3090.5], [143.0, 3236.0], [142.0, 2957.0], [141.0, 10520.0], [140.0, 7485.0], [139.0, 7498.0], [150.0, 3681.0], [149.0, 4204.0], [151.0, 4200.0], [148.0, 3293.0], [147.0, 7474.0], [146.0, 10550.0], [145.0, 7495.0], [144.0, 3362.0], [158.0, 7782.0], [157.0, 4054.0], [156.0, 7631.0], [155.0, 6020.5], [153.0, 5720.5], [163.0, 6031.5], [162.0, 5897.2], [165.0, 3918.6666666666665], [167.0, 8027.0], [166.0, 11096.0], [164.0, 8046.0], [172.0, 4812.5], [175.0, 11129.0], [174.0, 8300.0], [173.0, 5344.0], [171.0, 8143.0], [170.0, 8076.0], [169.0, 4929.0], [168.0, 5178.0], [181.0, 7910.0], [183.0, 8482.0], [182.0, 8453.0], [180.0, 8473.0], [179.0, 8413.0], [178.0, 8350.0], [177.0, 8353.0], [176.0, 8196.0], [190.0, 6661.0], [191.0, 11095.0], [189.0, 11081.0], [188.0, 8471.0], [187.0, 8460.0], [186.0, 11029.0], [185.0, 8426.0], [184.0, 8411.0], [195.0, 6760.0], [199.0, 8517.0], [198.0, 8427.0], [197.0, 8539.0], [196.0, 8533.0], [194.0, 4430.0], [193.0, 8492.0], [192.0, 8514.0], [203.0, 6873.0], [204.0, 5935.5], [207.0, 8236.0], [206.0, 4549.0], [205.0, 10517.0], [202.0, 8511.0], [201.0, 5505.0], [200.0, 4475.0], [212.0, 6105.333333333333], [215.0, 6813.0], [214.0, 8154.0], [213.0, 4948.0], [211.0, 8267.0], [210.0, 10481.0], [209.0, 8311.0], [208.0, 5233.0], [223.0, 8286.0], [222.0, 8206.0], [221.0, 8197.0], [220.0, 4958.0], [219.0, 6590.5], [217.0, 10131.0], [216.0, 8116.0], [229.0, 5605.5], [228.0, 4750.666666666667], [231.0, 4671.0], [230.0, 7508.0], [227.0, 7759.0], [226.0, 7738.0], [225.0, 9954.0], [224.0, 8279.0], [233.0, 6546.0], [236.0, 5380.5], [235.0, 5277.5], [234.0, 5486.0], [239.0, 6362.0], [238.0, 6549.0], [237.0, 6574.0], [232.0, 9167.0], [241.0, 7536.0], [240.0, 6218.0], [1.0, 35.0]], "isOverall": false, "label": "300 acessos", "isController": false}, {"data": [[122.08666666666657, 5067.9966666666705]], "isOverall": false, "label": "300 acessos-Aggregated", "isController": false}, {"data": [[2.0, 7822.5], [12.0, 374.0], [13.0, 385.0], [15.0, 398.0], [17.0, 405.0], [18.0, 472.0], [20.0, 463.0], [22.0, 495.0], [24.0, 549.0], [27.0, 664.0], [28.0, 624.0], [30.0, 668.0], [31.0, 674.0], [32.0, 732.5], [36.0, 788.0], [39.0, 825.0], [42.0, 894.0], [44.0, 948.0], [45.0, 830.0], [46.0, 924.0], [48.0, 992.0], [53.0, 1110.0], [54.0, 1101.0], [59.0, 1180.0], [60.0, 1226.0], [61.0, 8352.0], [63.0, 1261.0], [64.0, 1255.0], [65.0, 1157.0], [66.0, 1198.0], [67.0, 1169.0], [68.0, 1222.0], [70.0, 1404.0], [73.0, 1370.5], [72.0, 1426.5], [76.0, 1436.0], [77.0, 4936.5], [80.0, 1770.5], [81.0, 509.0], [83.0, 1579.5], [84.0, 1592.0], [85.0, 1542.0], [87.0, 11574.0], [88.0, 1682.5], [91.0, 1699.0], [92.0, 1185.5], [95.0, 3365.75], [96.0, 1892.0], [97.0, 2240.0], [98.0, 1867.0], [99.0, 1864.0], [100.0, 1868.0], [102.0, 1903.0], [107.0, 2042.0], [108.0, 2021.0], [110.0, 2953.0], [112.0, 2097.3333333333335], [117.0, 2150.5], [118.0, 2271.0], [121.0, 3332.0], [122.0, 6152.5], [123.0, 2251.0], [125.0, 2268.5], [126.0, 2323.5], [127.0, 9017.0], [131.0, 2380.0], [135.0, 2451.0], [133.0, 6508.0], [136.0, 1842.0], [138.0, 2805.25], [142.0, 4497.5], [139.0, 6475.0], [144.0, 2617.0], [146.0, 2665.0], [149.0, 2716.0], [150.0, 3938.0], [151.0, 6142.0], [148.0, 6239.0], [152.0, 2773.0], [153.0, 2821.0], [154.0, 2734.0], [156.0, 2757.0], [160.0, 546.0], [162.0, 2898.0], [163.0, 3009.0], [164.0, 2869.0], [165.0, 2914.3333333333335], [170.0, 3043.0], [171.0, 2993.5], [173.0, 4547.0], [175.0, 3108.0], [174.0, 6022.333333333333], [176.0, 3202.0], [179.0, 3109.0], [180.0, 4287.5], [183.0, 6050.2], [184.0, 4624.5], [185.0, 543.0], [188.0, 3373.0], [189.0, 3311.666666666667], [190.0, 3377.0], [191.0, 6005.0], [187.0, 5995.0], [193.0, 500.0], [194.0, 3491.0], [195.0, 3474.0], [196.0, 3497.0], [197.0, 4737.0], [199.0, 7298.0], [198.0, 5864.0], [192.0, 5996.5], [201.0, 3630.0], [203.0, 4815.142857142857], [206.0, 3743.0], [207.0, 5563.0], [205.0, 5526.0], [204.0, 6372.75], [202.0, 5763.0], [211.0, 4804.4], [212.0, 4498.0], [214.0, 3738.0], [215.0, 4540.0], [213.0, 5356.0], [209.0, 7532.333333333333], [216.0, 3864.0], [218.0, 3869.0], [223.0, 6063.5], [222.0, 5212.0], [219.0, 5289.0], [217.0, 5203.0], [225.0, 5216.133333333334], [226.0, 2947.5], [227.0, 4812.25], [228.0, 4060.0], [229.0, 4959.0], [224.0, 5173.0], [232.0, 4639.3125], [234.0, 4158.0], [235.0, 4222.888888888889], [236.0, 4248.833333333332], [237.0, 4330.333333333334], [238.0, 3372.3333333333335], [239.0, 4733.4], [240.0, 4210.0]], "isOverall": false, "label": "login", "isController": false}, {"data": [[161.28333333333325, 3669.690000000001]], "isOverall": false, "label": "login-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 241.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 3195.0, "minX": 1.75432536E12, "maxY": 7480.0, "series": [{"data": [[1.75432536E12, 7480.0]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.75432536E12, 3195.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75432536E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 3669.690000000001, "minX": 1.75432536E12, "maxY": 5067.9966666666705, "series": [{"data": [[1.75432536E12, 5067.9966666666705]], "isOverall": false, "label": "300 acessos", "isController": false}, {"data": [[1.75432536E12, 3669.690000000001]], "isOverall": false, "label": "login", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75432536E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 3669.656666666669, "minX": 1.75432536E12, "maxY": 5062.873333333336, "series": [{"data": [[1.75432536E12, 5062.873333333336]], "isOverall": false, "label": "300 acessos", "isController": false}, {"data": [[1.75432536E12, 3669.656666666669]], "isOverall": false, "label": "login", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75432536E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.75432536E12, "maxY": 0.5800000000000001, "series": [{"data": [[1.75432536E12, 0.0]], "isOverall": false, "label": "300 acessos", "isController": false}, {"data": [[1.75432536E12, 0.5800000000000001]], "isOverall": false, "label": "login", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75432536E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 28.0, "minX": 1.75432536E12, "maxY": 11574.0, "series": [{"data": [[1.75432536E12, 11574.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.75432536E12, 8277.8]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.75432536E12, 11093.87]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.75432536E12, 8672.599999999999]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.75432536E12, 28.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.75432536E12, 4205.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75432536E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 508.5, "minX": 18.0, "maxY": 8418.5, "series": [{"data": [[36.0, 5563.0], [153.0, 4545.0], [40.0, 8418.5], [53.0, 6142.0], [18.0, 508.5], [20.0, 3375.0], [21.0, 948.0], [22.0, 2123.5], [24.0, 3852.5], [25.0, 2585.0], [27.0, 4190.0], [28.0, 4911.5], [29.0, 1407.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 153.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 508.5, "minX": 18.0, "maxY": 8415.5, "series": [{"data": [[36.0, 5563.0], [153.0, 4525.0], [40.0, 8415.5], [53.0, 6142.0], [18.0, 508.5], [20.0, 3375.0], [21.0, 948.0], [22.0, 2123.5], [24.0, 3852.5], [25.0, 2585.0], [27.0, 4190.0], [28.0, 4911.5], [29.0, 1407.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 153.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 10.0, "minX": 1.75432536E12, "maxY": 10.0, "series": [{"data": [[1.75432536E12, 10.0]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75432536E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 10.0, "minX": 1.75432536E12, "maxY": 10.0, "series": [{"data": [[1.75432536E12, 10.0]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75432536E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 5.0, "minX": 1.75432536E12, "maxY": 5.0, "series": [{"data": [[1.75432536E12, 5.0]], "isOverall": false, "label": "300 acessos-success", "isController": false}, {"data": [[1.75432536E12, 5.0]], "isOverall": false, "label": "login-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75432536E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 10.0, "minX": 1.75432536E12, "maxY": 10.0, "series": [{"data": [[1.75432536E12, 10.0]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75432536E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}


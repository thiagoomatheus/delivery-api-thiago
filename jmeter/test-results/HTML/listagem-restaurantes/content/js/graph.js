/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 77.0, "minX": 0.0, "maxY": 18175.0, "series": [{"data": [[0.0, 77.0], [0.1, 77.0], [0.2, 113.0], [0.3, 113.0], [0.4, 544.0], [0.5, 544.0], [0.6, 544.0], [0.7, 911.0], [0.8, 1110.0], [0.9, 1110.0], [1.0, 1144.0], [1.1, 1144.0], [1.2, 1315.0], [1.3, 1315.0], [1.4, 1379.0], [1.5, 1379.0], [1.6, 1400.0], [1.7, 1400.0], [1.8, 1472.0], [1.9, 1472.0], [2.0, 1497.0], [2.1, 1497.0], [2.2, 1499.0], [2.3, 1499.0], [2.4, 1604.0], [2.5, 1604.0], [2.6, 1640.0], [2.7, 1640.0], [2.8, 1640.0], [2.9, 1678.0], [3.0, 1678.0], [3.1, 1692.0], [3.2, 1692.0], [3.3, 1870.0], [3.4, 1870.0], [3.5, 1896.0], [3.6, 1896.0], [3.7, 1905.0], [3.8, 1905.0], [3.9, 1952.0], [4.0, 1952.0], [4.1, 1991.0], [4.2, 1991.0], [4.3, 2004.0], [4.4, 2004.0], [4.5, 2054.0], [4.6, 2054.0], [4.7, 2073.0], [4.8, 2073.0], [4.9, 2122.0], [5.0, 2122.0], [5.1, 2159.0], [5.2, 2159.0], [5.3, 2219.0], [5.4, 2219.0], [5.5, 2277.0], [5.6, 2277.0], [5.7, 2334.0], [5.8, 2334.0], [5.9, 2386.0], [6.0, 2386.0], [6.1, 2458.0], [6.2, 2458.0], [6.3, 2486.0], [6.4, 2486.0], [6.5, 2494.0], [6.6, 2494.0], [6.7, 2498.0], [6.8, 2498.0], [6.9, 2505.0], [7.0, 2505.0], [7.1, 2513.0], [7.2, 2513.0], [7.3, 2539.0], [7.4, 2539.0], [7.5, 2552.0], [7.6, 2552.0], [7.7, 2557.0], [7.8, 2557.0], [7.9, 2652.0], [8.0, 2652.0], [8.1, 2699.0], [8.2, 2699.0], [8.3, 2720.0], [8.4, 2720.0], [8.5, 2720.0], [8.6, 2720.0], [8.7, 2737.0], [8.8, 2737.0], [8.9, 2779.0], [9.0, 2779.0], [9.1, 2842.0], [9.2, 2842.0], [9.3, 3051.0], [9.4, 3057.0], [9.5, 3057.0], [9.6, 3159.0], [9.7, 3159.0], [9.8, 3174.0], [9.9, 3174.0], [10.0, 3183.0], [10.1, 3183.0], [10.2, 3187.0], [10.3, 3187.0], [10.4, 3201.0], [10.5, 3201.0], [10.6, 3205.0], [10.7, 3205.0], [10.8, 3207.0], [10.9, 3207.0], [11.0, 3238.0], [11.1, 3238.0], [11.2, 3253.0], [11.3, 3253.0], [11.4, 3315.0], [11.5, 3315.0], [11.6, 3338.0], [11.7, 3338.0], [11.8, 3427.0], [11.9, 3427.0], [12.0, 3430.0], [12.1, 3430.0], [12.2, 3433.0], [12.3, 3433.0], [12.4, 3443.0], [12.5, 3443.0], [12.6, 3444.0], [12.7, 3444.0], [12.8, 3448.0], [12.9, 3448.0], [13.0, 3454.0], [13.1, 3454.0], [13.2, 3476.0], [13.3, 3476.0], [13.4, 3494.0], [13.5, 3494.0], [13.6, 3508.0], [13.7, 3508.0], [13.8, 3832.0], [13.9, 3832.0], [14.0, 3870.0], [14.1, 3870.0], [14.2, 3871.0], [14.3, 3871.0], [14.4, 3884.0], [14.5, 3884.0], [14.6, 3887.0], [14.7, 3887.0], [14.8, 3956.0], [14.9, 3956.0], [15.0, 3976.0], [15.1, 3976.0], [15.2, 4016.0], [15.3, 4016.0], [15.4, 4034.0], [15.5, 4034.0], [15.6, 4037.0], [15.7, 4037.0], [15.8, 4041.0], [15.9, 4041.0], [16.0, 4045.0], [16.1, 4045.0], [16.2, 4059.0], [16.3, 4059.0], [16.4, 4065.0], [16.5, 4065.0], [16.6, 4067.0], [16.7, 4067.0], [16.8, 4131.0], [16.9, 4131.0], [17.0, 4204.0], [17.1, 4204.0], [17.2, 4220.0], [17.3, 4220.0], [17.4, 4223.0], [17.5, 4223.0], [17.6, 4242.0], [17.7, 4242.0], [17.8, 4271.0], [17.9, 4271.0], [18.0, 4316.0], [18.1, 4316.0], [18.2, 4348.0], [18.3, 4348.0], [18.4, 4398.0], [18.5, 4398.0], [18.6, 4440.0], [18.7, 4440.0], [18.8, 4446.0], [18.9, 4446.0], [19.0, 4522.0], [19.1, 4522.0], [19.2, 4541.0], [19.3, 4541.0], [19.4, 4562.0], [19.5, 4562.0], [19.6, 4566.0], [19.7, 4566.0], [19.8, 4575.0], [19.9, 4575.0], [20.0, 4577.0], [20.1, 4577.0], [20.2, 4591.0], [20.3, 4591.0], [20.4, 4681.0], [20.5, 4681.0], [20.6, 4735.0], [20.7, 4735.0], [20.8, 4803.0], [20.9, 4803.0], [21.0, 4809.0], [21.1, 4809.0], [21.2, 4849.0], [21.3, 4849.0], [21.4, 4887.0], [21.5, 4887.0], [21.6, 5095.0], [21.7, 5095.0], [21.8, 5099.0], [21.9, 5099.0], [22.0, 5233.0], [22.1, 5233.0], [22.2, 5323.0], [22.3, 5323.0], [22.4, 5330.0], [22.5, 5330.0], [22.6, 5373.0], [22.7, 5373.0], [22.8, 5408.0], [22.9, 5408.0], [23.0, 5418.0], [23.1, 5418.0], [23.2, 5529.0], [23.3, 5529.0], [23.4, 5532.0], [23.5, 5532.0], [23.6, 5539.0], [23.7, 5539.0], [23.8, 5543.0], [23.9, 5543.0], [24.0, 5566.0], [24.1, 5566.0], [24.2, 5607.0], [24.3, 5607.0], [24.4, 5608.0], [24.5, 5608.0], [24.6, 5642.0], [24.7, 5642.0], [24.8, 5650.0], [24.9, 5650.0], [25.0, 5696.0], [25.1, 5696.0], [25.2, 5702.0], [25.3, 5702.0], [25.4, 5734.0], [25.5, 5734.0], [25.6, 5763.0], [25.7, 5763.0], [25.8, 5784.0], [25.9, 5784.0], [26.0, 5860.0], [26.1, 5860.0], [26.2, 5872.0], [26.3, 5872.0], [26.4, 5894.0], [26.5, 5894.0], [26.6, 5903.0], [26.7, 5903.0], [26.8, 5938.0], [26.9, 5938.0], [27.0, 5940.0], [27.1, 5940.0], [27.2, 5992.0], [27.3, 5992.0], [27.4, 6070.0], [27.5, 6070.0], [27.6, 6071.0], [27.7, 6071.0], [27.8, 6088.0], [27.9, 6088.0], [28.0, 6135.0], [28.1, 6135.0], [28.2, 6158.0], [28.3, 6158.0], [28.4, 6159.0], [28.5, 6159.0], [28.6, 6188.0], [28.7, 6188.0], [28.8, 6216.0], [28.9, 6216.0], [29.0, 6227.0], [29.1, 6227.0], [29.2, 6300.0], [29.3, 6300.0], [29.4, 6318.0], [29.5, 6318.0], [29.6, 6331.0], [29.7, 6331.0], [29.8, 6351.0], [29.9, 6351.0], [30.0, 6351.0], [30.1, 6351.0], [30.2, 6354.0], [30.3, 6354.0], [30.4, 6412.0], [30.5, 6412.0], [30.6, 6445.0], [30.7, 6445.0], [30.8, 6455.0], [30.9, 6455.0], [31.0, 6471.0], [31.1, 6471.0], [31.2, 6615.0], [31.3, 6615.0], [31.4, 6618.0], [31.5, 6618.0], [31.6, 6635.0], [31.7, 6635.0], [31.8, 6653.0], [31.9, 6653.0], [32.0, 6667.0], [32.1, 6667.0], [32.2, 6705.0], [32.3, 6705.0], [32.4, 6713.0], [32.5, 6713.0], [32.6, 6732.0], [32.7, 6732.0], [32.8, 6744.0], [32.9, 6744.0], [33.0, 6782.0], [33.1, 6782.0], [33.2, 6839.0], [33.3, 6839.0], [33.4, 7000.0], [33.5, 7000.0], [33.6, 7123.0], [33.7, 7123.0], [33.8, 7144.0], [33.9, 7144.0], [34.0, 7227.0], [34.1, 7227.0], [34.2, 7241.0], [34.3, 7241.0], [34.4, 7272.0], [34.5, 7272.0], [34.6, 7330.0], [34.7, 7330.0], [34.8, 7358.0], [34.9, 7358.0], [35.0, 7379.0], [35.1, 7379.0], [35.2, 7383.0], [35.3, 7383.0], [35.4, 7427.0], [35.5, 7427.0], [35.6, 7435.0], [35.7, 7435.0], [35.8, 7510.0], [35.9, 7510.0], [36.0, 7559.0], [36.1, 7559.0], [36.2, 7590.0], [36.3, 7590.0], [36.4, 7651.0], [36.5, 7651.0], [36.6, 7689.0], [36.7, 7689.0], [36.8, 7722.0], [36.9, 7722.0], [37.0, 7758.0], [37.1, 7758.0], [37.2, 7822.0], [37.3, 7822.0], [37.4, 7833.0], [37.5, 7833.0], [37.6, 7924.0], [37.7, 7924.0], [37.8, 7924.0], [37.9, 7970.0], [38.0, 7970.0], [38.1, 7973.0], [38.2, 7973.0], [38.3, 8001.0], [38.4, 8001.0], [38.5, 8018.0], [38.6, 8018.0], [38.7, 8050.0], [38.8, 8050.0], [38.9, 8133.0], [39.0, 8133.0], [39.1, 8153.0], [39.2, 8153.0], [39.3, 8164.0], [39.4, 8164.0], [39.5, 8188.0], [39.6, 8188.0], [39.7, 8212.0], [39.8, 8212.0], [39.9, 8236.0], [40.0, 8236.0], [40.1, 8292.0], [40.2, 8292.0], [40.3, 8307.0], [40.4, 8307.0], [40.5, 8336.0], [40.6, 8336.0], [40.7, 8342.0], [40.8, 8342.0], [40.9, 8375.0], [41.0, 8375.0], [41.1, 8401.0], [41.2, 8401.0], [41.3, 8401.0], [41.4, 8401.0], [41.5, 8402.0], [41.6, 8402.0], [41.7, 8440.0], [41.8, 8440.0], [41.9, 8445.0], [42.0, 8445.0], [42.1, 8468.0], [42.2, 8468.0], [42.3, 8471.0], [42.4, 8471.0], [42.5, 8477.0], [42.6, 8477.0], [42.7, 8484.0], [42.8, 8484.0], [42.9, 8502.0], [43.0, 8502.0], [43.1, 8512.0], [43.2, 8512.0], [43.3, 8548.0], [43.4, 8548.0], [43.5, 8574.0], [43.6, 8574.0], [43.7, 8577.0], [43.8, 8577.0], [43.9, 8708.0], [44.0, 8708.0], [44.1, 8713.0], [44.2, 8713.0], [44.3, 8723.0], [44.4, 8723.0], [44.5, 8739.0], [44.6, 8739.0], [44.7, 8745.0], [44.8, 8745.0], [44.9, 8791.0], [45.0, 8791.0], [45.1, 8792.0], [45.2, 8792.0], [45.3, 8802.0], [45.4, 8802.0], [45.5, 8806.0], [45.6, 8806.0], [45.7, 8907.0], [45.8, 8907.0], [45.9, 8917.0], [46.0, 8917.0], [46.1, 8939.0], [46.2, 8939.0], [46.3, 8957.0], [46.4, 8957.0], [46.5, 8967.0], [46.6, 8967.0], [46.7, 8985.0], [46.8, 8985.0], [46.9, 9043.0], [47.0, 9043.0], [47.1, 9063.0], [47.2, 9063.0], [47.3, 9064.0], [47.4, 9064.0], [47.5, 9082.0], [47.6, 9082.0], [47.7, 9126.0], [47.8, 9126.0], [47.9, 9163.0], [48.0, 9163.0], [48.1, 9166.0], [48.2, 9166.0], [48.3, 9173.0], [48.4, 9173.0], [48.5, 9186.0], [48.6, 9186.0], [48.7, 9209.0], [48.8, 9209.0], [48.9, 9212.0], [49.0, 9212.0], [49.1, 9217.0], [49.2, 9217.0], [49.3, 9233.0], [49.4, 9233.0], [49.5, 9238.0], [49.6, 9238.0], [49.7, 9253.0], [49.8, 9253.0], [49.9, 9319.0], [50.0, 9319.0], [50.1, 9327.0], [50.2, 9327.0], [50.3, 9491.0], [50.4, 9491.0], [50.5, 9495.0], [50.6, 9495.0], [50.7, 9496.0], [50.8, 9496.0], [50.9, 9523.0], [51.0, 9523.0], [51.1, 9543.0], [51.2, 9543.0], [51.3, 9591.0], [51.4, 9591.0], [51.5, 9613.0], [51.6, 9613.0], [51.7, 9614.0], [51.8, 9614.0], [51.9, 9647.0], [52.0, 9647.0], [52.1, 9668.0], [52.2, 9668.0], [52.3, 9696.0], [52.4, 9696.0], [52.5, 9731.0], [52.6, 9731.0], [52.7, 9767.0], [52.8, 9767.0], [52.9, 9797.0], [53.0, 9797.0], [53.1, 9800.0], [53.2, 9800.0], [53.3, 9832.0], [53.4, 9832.0], [53.5, 9868.0], [53.6, 9868.0], [53.7, 9936.0], [53.8, 9936.0], [53.9, 9936.0], [54.0, 9936.0], [54.1, 9972.0], [54.2, 9972.0], [54.3, 9995.0], [54.4, 9995.0], [54.5, 9996.0], [54.6, 9996.0], [54.7, 9999.0], [54.8, 9999.0], [54.9, 10021.0], [55.0, 10021.0], [55.1, 10057.0], [55.2, 10057.0], [55.3, 10107.0], [55.4, 10107.0], [55.5, 10112.0], [55.6, 10112.0], [55.7, 10114.0], [55.8, 10114.0], [55.9, 10120.0], [56.0, 10120.0], [56.1, 10138.0], [56.2, 10138.0], [56.3, 10203.0], [56.4, 10203.0], [56.5, 10214.0], [56.6, 10214.0], [56.7, 10244.0], [56.8, 10244.0], [56.9, 10251.0], [57.0, 10251.0], [57.1, 10279.0], [57.2, 10279.0], [57.3, 10292.0], [57.4, 10292.0], [57.5, 10299.0], [57.6, 10299.0], [57.7, 10304.0], [57.8, 10304.0], [57.9, 10315.0], [58.0, 10315.0], [58.1, 10347.0], [58.2, 10347.0], [58.3, 10357.0], [58.4, 10357.0], [58.5, 10379.0], [58.6, 10379.0], [58.7, 10447.0], [58.8, 10447.0], [58.9, 10461.0], [59.0, 10461.0], [59.1, 10469.0], [59.2, 10469.0], [59.3, 10484.0], [59.4, 10484.0], [59.5, 10494.0], [59.6, 10494.0], [59.7, 10502.0], [59.8, 10502.0], [59.9, 10550.0], [60.0, 10550.0], [60.1, 10574.0], [60.2, 10574.0], [60.3, 10585.0], [60.4, 10585.0], [60.5, 10594.0], [60.6, 10594.0], [60.7, 10644.0], [60.8, 10644.0], [60.9, 10670.0], [61.0, 10670.0], [61.1, 10712.0], [61.2, 10712.0], [61.3, 10730.0], [61.4, 10730.0], [61.5, 10775.0], [61.6, 10775.0], [61.7, 10779.0], [61.8, 10779.0], [61.9, 10788.0], [62.0, 10788.0], [62.1, 10808.0], [62.2, 10808.0], [62.3, 10862.0], [62.4, 10862.0], [62.5, 10870.0], [62.6, 10870.0], [62.7, 10870.0], [62.8, 10870.0], [62.9, 10946.0], [63.0, 10946.0], [63.1, 11040.0], [63.2, 11040.0], [63.3, 11055.0], [63.4, 11055.0], [63.5, 11074.0], [63.6, 11074.0], [63.7, 11120.0], [63.8, 11120.0], [63.9, 11133.0], [64.0, 11133.0], [64.1, 11148.0], [64.2, 11148.0], [64.3, 11183.0], [64.4, 11183.0], [64.5, 11196.0], [64.6, 11196.0], [64.7, 11211.0], [64.8, 11211.0], [64.9, 11275.0], [65.0, 11275.0], [65.1, 11324.0], [65.2, 11324.0], [65.3, 11344.0], [65.4, 11344.0], [65.5, 11348.0], [65.6, 11348.0], [65.7, 11394.0], [65.8, 11394.0], [65.9, 11439.0], [66.0, 11439.0], [66.1, 11459.0], [66.2, 11459.0], [66.3, 11467.0], [66.4, 11467.0], [66.5, 11495.0], [66.6, 11495.0], [66.7, 11511.0], [66.8, 11511.0], [66.9, 11544.0], [67.0, 11544.0], [67.1, 11609.0], [67.2, 11609.0], [67.3, 11617.0], [67.4, 11617.0], [67.5, 11622.0], [67.6, 11622.0], [67.7, 11633.0], [67.8, 11633.0], [67.9, 11652.0], [68.0, 11652.0], [68.1, 11666.0], [68.2, 11666.0], [68.3, 11676.0], [68.4, 11676.0], [68.5, 11695.0], [68.6, 11695.0], [68.7, 11696.0], [68.8, 11696.0], [68.9, 11782.0], [69.0, 11782.0], [69.1, 11794.0], [69.2, 11794.0], [69.3, 11876.0], [69.4, 11876.0], [69.5, 11914.0], [69.6, 11914.0], [69.7, 11941.0], [69.8, 11941.0], [69.9, 11985.0], [70.0, 11985.0], [70.1, 11986.0], [70.2, 11986.0], [70.3, 12001.0], [70.4, 12001.0], [70.5, 12016.0], [70.6, 12016.0], [70.7, 12051.0], [70.8, 12051.0], [70.9, 12051.0], [71.0, 12051.0], [71.1, 12060.0], [71.2, 12060.0], [71.3, 12088.0], [71.4, 12088.0], [71.5, 12093.0], [71.6, 12093.0], [71.7, 12105.0], [71.8, 12105.0], [71.9, 12108.0], [72.0, 12108.0], [72.1, 12109.0], [72.2, 12109.0], [72.3, 12120.0], [72.4, 12120.0], [72.5, 12177.0], [72.6, 12177.0], [72.7, 12215.0], [72.8, 12215.0], [72.9, 12259.0], [73.0, 12259.0], [73.1, 12291.0], [73.2, 12291.0], [73.3, 12302.0], [73.4, 12302.0], [73.5, 12305.0], [73.6, 12305.0], [73.7, 12320.0], [73.8, 12320.0], [73.9, 12335.0], [74.0, 12335.0], [74.1, 12377.0], [74.2, 12377.0], [74.3, 12422.0], [74.4, 12422.0], [74.5, 12432.0], [74.6, 12432.0], [74.7, 12467.0], [74.8, 12467.0], [74.9, 12468.0], [75.0, 12468.0], [75.1, 12475.0], [75.2, 12475.0], [75.3, 12476.0], [75.4, 12476.0], [75.5, 12555.0], [75.6, 12555.0], [75.7, 12555.0], [75.8, 12555.0], [75.9, 12603.0], [76.0, 12603.0], [76.1, 12621.0], [76.2, 12621.0], [76.3, 12627.0], [76.4, 12627.0], [76.5, 12713.0], [76.6, 12713.0], [76.7, 12726.0], [76.8, 12726.0], [76.9, 12760.0], [77.0, 12760.0], [77.1, 12769.0], [77.2, 12769.0], [77.3, 12822.0], [77.4, 12822.0], [77.5, 12881.0], [77.6, 12881.0], [77.7, 12886.0], [77.8, 12886.0], [77.9, 12922.0], [78.0, 12922.0], [78.1, 12945.0], [78.2, 12945.0], [78.3, 12958.0], [78.4, 12958.0], [78.5, 12993.0], [78.6, 12993.0], [78.7, 13121.0], [78.8, 13121.0], [78.9, 13204.0], [79.0, 13204.0], [79.1, 13220.0], [79.2, 13220.0], [79.3, 13229.0], [79.4, 13229.0], [79.5, 13232.0], [79.6, 13232.0], [79.7, 13236.0], [79.8, 13236.0], [79.9, 13238.0], [80.0, 13238.0], [80.1, 13240.0], [80.2, 13240.0], [80.3, 13247.0], [80.4, 13247.0], [80.5, 13396.0], [80.6, 13396.0], [80.7, 13459.0], [80.8, 13459.0], [80.9, 13528.0], [81.0, 13528.0], [81.1, 13555.0], [81.2, 13555.0], [81.3, 13570.0], [81.4, 13570.0], [81.5, 13585.0], [81.6, 13585.0], [81.7, 13588.0], [81.8, 13588.0], [81.9, 13677.0], [82.0, 13677.0], [82.1, 13783.0], [82.2, 13783.0], [82.3, 13801.0], [82.4, 13801.0], [82.5, 13819.0], [82.6, 13819.0], [82.7, 13835.0], [82.8, 13835.0], [82.9, 13856.0], [83.0, 13856.0], [83.1, 13865.0], [83.2, 13865.0], [83.3, 13876.0], [83.4, 13876.0], [83.5, 13878.0], [83.6, 13878.0], [83.7, 13943.0], [83.8, 13943.0], [83.9, 13970.0], [84.0, 13970.0], [84.1, 14028.0], [84.2, 14028.0], [84.3, 14036.0], [84.4, 14036.0], [84.5, 14036.0], [84.6, 14036.0], [84.7, 14043.0], [84.8, 14043.0], [84.9, 14052.0], [85.0, 14052.0], [85.1, 14062.0], [85.2, 14062.0], [85.3, 14068.0], [85.4, 14068.0], [85.5, 14069.0], [85.6, 14069.0], [85.7, 14157.0], [85.8, 14157.0], [85.9, 14176.0], [86.0, 14176.0], [86.1, 14204.0], [86.2, 14204.0], [86.3, 14211.0], [86.4, 14211.0], [86.5, 14246.0], [86.6, 14246.0], [86.7, 14247.0], [86.8, 14247.0], [86.9, 14301.0], [87.0, 14301.0], [87.1, 14371.0], [87.2, 14371.0], [87.3, 14374.0], [87.4, 14374.0], [87.5, 14381.0], [87.6, 14381.0], [87.7, 14403.0], [87.8, 14403.0], [87.9, 14414.0], [88.0, 14414.0], [88.1, 14430.0], [88.2, 14430.0], [88.3, 14498.0], [88.4, 14498.0], [88.5, 14505.0], [88.6, 14505.0], [88.7, 14512.0], [88.8, 14512.0], [88.9, 14514.0], [89.0, 14514.0], [89.1, 14533.0], [89.2, 14533.0], [89.3, 14537.0], [89.4, 14537.0], [89.5, 14560.0], [89.6, 14560.0], [89.7, 14586.0], [89.8, 14586.0], [89.9, 14597.0], [90.0, 14597.0], [90.1, 14600.0], [90.2, 14600.0], [90.3, 14641.0], [90.4, 14641.0], [90.5, 14669.0], [90.6, 14669.0], [90.7, 14715.0], [90.8, 14715.0], [90.9, 14717.0], [91.0, 14717.0], [91.1, 14732.0], [91.2, 14732.0], [91.3, 14736.0], [91.4, 14736.0], [91.5, 14748.0], [91.6, 14748.0], [91.7, 14759.0], [91.8, 14759.0], [91.9, 14778.0], [92.0, 14778.0], [92.1, 14778.0], [92.2, 14778.0], [92.3, 14791.0], [92.4, 14791.0], [92.5, 14815.0], [92.6, 14815.0], [92.7, 14832.0], [92.8, 14832.0], [92.9, 14840.0], [93.0, 14840.0], [93.1, 14844.0], [93.2, 14844.0], [93.3, 14848.0], [93.4, 14848.0], [93.5, 14870.0], [93.6, 14870.0], [93.7, 14889.0], [93.8, 14889.0], [93.9, 14895.0], [94.0, 14895.0], [94.1, 14900.0], [94.2, 14900.0], [94.3, 14902.0], [94.4, 14902.0], [94.5, 14905.0], [94.6, 14905.0], [94.7, 14930.0], [94.8, 14930.0], [94.9, 14970.0], [95.0, 14970.0], [95.1, 14973.0], [95.2, 14973.0], [95.3, 14977.0], [95.4, 14977.0], [95.5, 14980.0], [95.6, 14980.0], [95.7, 15019.0], [95.8, 15019.0], [95.9, 15040.0], [96.0, 15040.0], [96.1, 15087.0], [96.2, 15087.0], [96.3, 15094.0], [96.4, 15094.0], [96.5, 15095.0], [96.6, 15095.0], [96.7, 15130.0], [96.8, 15130.0], [96.9, 15252.0], [97.0, 15252.0], [97.1, 15310.0], [97.2, 15310.0], [97.3, 15430.0], [97.4, 15430.0], [97.5, 15463.0], [97.6, 15463.0], [97.7, 15834.0], [97.8, 15834.0], [97.9, 15883.0], [98.0, 15883.0], [98.1, 16028.0], [98.2, 16028.0], [98.3, 16363.0], [98.4, 16363.0], [98.5, 16401.0], [98.6, 16401.0], [98.7, 16489.0], [98.8, 16489.0], [98.9, 16496.0], [99.0, 16496.0], [99.1, 16665.0], [99.2, 16665.0], [99.3, 16695.0], [99.4, 16695.0], [99.5, 16812.0], [99.6, 16812.0], [99.7, 17792.0], [99.8, 17792.0], [99.9, 18175.0], [100.0, 18175.0]], "isOverall": false, "label": "500 acessos", "isController": false}, {"data": [[0.0, 386.0], [0.1, 386.0], [0.2, 466.0], [0.3, 466.0], [0.4, 481.0], [0.5, 481.0], [0.6, 481.0], [0.7, 490.0], [0.8, 496.0], [0.9, 496.0], [1.0, 537.0], [1.1, 537.0], [1.2, 538.0], [1.3, 538.0], [1.4, 540.0], [1.5, 540.0], [1.6, 545.0], [1.7, 545.0], [1.8, 593.0], [1.9, 593.0], [2.0, 610.0], [2.1, 610.0], [2.2, 655.0], [2.3, 655.0], [2.4, 660.0], [2.5, 660.0], [2.6, 690.0], [2.7, 690.0], [2.8, 690.0], [2.9, 777.0], [3.0, 777.0], [3.1, 785.0], [3.2, 785.0], [3.3, 790.0], [3.4, 790.0], [3.5, 796.0], [3.6, 796.0], [3.7, 818.0], [3.8, 818.0], [3.9, 824.0], [4.0, 824.0], [4.1, 829.0], [4.2, 829.0], [4.3, 832.0], [4.4, 832.0], [4.5, 920.0], [4.6, 920.0], [4.7, 924.0], [4.8, 924.0], [4.9, 941.0], [5.0, 941.0], [5.1, 996.0], [5.2, 996.0], [5.3, 1040.0], [5.4, 1040.0], [5.5, 1127.0], [5.6, 1127.0], [5.7, 1135.0], [5.8, 1135.0], [5.9, 1205.0], [6.0, 1205.0], [6.1, 1299.0], [6.2, 1299.0], [6.3, 1317.0], [6.4, 1317.0], [6.5, 1352.0], [6.6, 1352.0], [6.7, 1394.0], [6.8, 1394.0], [6.9, 1414.0], [7.0, 1414.0], [7.1, 1449.0], [7.2, 1449.0], [7.3, 1481.0], [7.4, 1481.0], [7.5, 1486.0], [7.6, 1486.0], [7.7, 1506.0], [7.8, 1506.0], [7.9, 1518.0], [8.0, 1518.0], [8.1, 1538.0], [8.2, 1538.0], [8.3, 1599.0], [8.4, 1599.0], [8.5, 1629.0], [8.6, 1629.0], [8.7, 1643.0], [8.8, 1702.0], [8.9, 1702.0], [9.0, 1758.0], [9.1, 1758.0], [9.2, 1759.0], [9.3, 1759.0], [9.4, 1761.0], [9.5, 1761.0], [9.6, 1834.0], [9.7, 1834.0], [9.8, 1843.0], [9.9, 1843.0], [10.0, 1912.0], [10.1, 1912.0], [10.2, 1942.0], [10.3, 1942.0], [10.4, 1968.0], [10.5, 1968.0], [10.6, 1984.0], [10.7, 1984.0], [10.8, 2032.0], [10.9, 2032.0], [11.0, 2047.0], [11.1, 2047.0], [11.2, 2052.0], [11.3, 2052.0], [11.4, 2078.0], [11.5, 2078.0], [11.6, 2079.0], [11.7, 2079.0], [11.8, 2093.0], [11.9, 2093.0], [12.0, 2165.0], [12.1, 2165.0], [12.2, 2191.0], [12.3, 2191.0], [12.4, 2321.0], [12.5, 2321.0], [12.6, 2331.0], [12.7, 2331.0], [12.8, 2378.0], [12.9, 2378.0], [13.0, 2454.0], [13.1, 2454.0], [13.2, 2476.0], [13.3, 2476.0], [13.4, 2488.0], [13.5, 2488.0], [13.6, 2497.0], [13.7, 2497.0], [13.8, 2497.0], [13.9, 2497.0], [14.0, 2517.0], [14.1, 2517.0], [14.2, 2555.0], [14.3, 2555.0], [14.4, 2573.0], [14.5, 2573.0], [14.6, 2610.0], [14.7, 2610.0], [14.8, 2648.0], [14.9, 2648.0], [15.0, 2706.0], [15.1, 2706.0], [15.2, 2711.0], [15.3, 2711.0], [15.4, 2725.0], [15.5, 2725.0], [15.6, 2727.0], [15.7, 2727.0], [15.8, 2732.0], [15.9, 2732.0], [16.0, 2735.0], [16.1, 2735.0], [16.2, 2793.0], [16.3, 2793.0], [16.4, 2824.0], [16.5, 2824.0], [16.6, 2862.0], [16.7, 2862.0], [16.8, 2982.0], [16.9, 2982.0], [17.0, 3049.0], [17.1, 3049.0], [17.2, 3049.0], [17.3, 3049.0], [17.4, 3083.0], [17.5, 3083.0], [17.6, 3135.0], [17.7, 3135.0], [17.8, 3146.0], [17.9, 3146.0], [18.0, 3158.0], [18.1, 3158.0], [18.2, 3165.0], [18.3, 3165.0], [18.4, 3174.0], [18.5, 3174.0], [18.6, 3225.0], [18.7, 3225.0], [18.8, 3324.0], [18.9, 3324.0], [19.0, 3343.0], [19.1, 3343.0], [19.2, 3358.0], [19.3, 3358.0], [19.4, 3435.0], [19.5, 3435.0], [19.6, 3477.0], [19.7, 3477.0], [19.8, 3479.0], [19.9, 3479.0], [20.0, 3493.0], [20.1, 3493.0], [20.2, 3508.0], [20.3, 3508.0], [20.4, 3511.0], [20.5, 3511.0], [20.6, 3562.0], [20.7, 3562.0], [20.8, 3594.0], [20.9, 3594.0], [21.0, 3631.0], [21.1, 3631.0], [21.2, 3631.0], [21.3, 3631.0], [21.4, 3652.0], [21.5, 3652.0], [21.6, 3703.0], [21.7, 3703.0], [21.8, 3746.0], [21.9, 3746.0], [22.0, 3753.0], [22.1, 3753.0], [22.2, 3777.0], [22.3, 3777.0], [22.4, 3819.0], [22.5, 3819.0], [22.6, 3823.0], [22.7, 3823.0], [22.8, 3834.0], [22.9, 3834.0], [23.0, 3888.0], [23.1, 3888.0], [23.2, 3906.0], [23.3, 3906.0], [23.4, 3931.0], [23.5, 3931.0], [23.6, 3936.0], [23.7, 3936.0], [23.8, 3950.0], [23.9, 3950.0], [24.0, 4050.0], [24.1, 4050.0], [24.2, 4055.0], [24.3, 4055.0], [24.4, 4066.0], [24.5, 4066.0], [24.6, 4092.0], [24.7, 4092.0], [24.8, 4118.0], [24.9, 4118.0], [25.0, 4163.0], [25.1, 4163.0], [25.2, 4171.0], [25.3, 4171.0], [25.4, 4189.0], [25.5, 4189.0], [25.6, 4218.0], [25.7, 4218.0], [25.8, 4301.0], [25.9, 4301.0], [26.0, 4309.0], [26.1, 4309.0], [26.2, 4326.0], [26.3, 4326.0], [26.4, 4326.0], [26.5, 4326.0], [26.6, 4326.0], [26.7, 4326.0], [26.8, 4330.0], [26.9, 4330.0], [27.0, 4412.0], [27.1, 4412.0], [27.2, 4444.0], [27.3, 4444.0], [27.4, 4462.0], [27.5, 4462.0], [27.6, 4464.0], [27.7, 4464.0], [27.8, 4478.0], [27.9, 4478.0], [28.0, 4511.0], [28.1, 4511.0], [28.2, 4530.0], [28.3, 4530.0], [28.4, 4566.0], [28.5, 4566.0], [28.6, 4572.0], [28.7, 4572.0], [28.8, 4642.0], [28.9, 4642.0], [29.0, 4703.0], [29.1, 4703.0], [29.2, 4729.0], [29.3, 4729.0], [29.4, 4747.0], [29.5, 4747.0], [29.6, 4750.0], [29.7, 4750.0], [29.8, 4765.0], [29.9, 4765.0], [30.0, 4776.0], [30.1, 4776.0], [30.2, 4802.0], [30.3, 4802.0], [30.4, 4831.0], [30.5, 4831.0], [30.6, 4831.0], [30.7, 4831.0], [30.8, 4840.0], [30.9, 4840.0], [31.0, 4915.0], [31.1, 4915.0], [31.2, 4919.0], [31.3, 4919.0], [31.4, 4944.0], [31.5, 4944.0], [31.6, 4947.0], [31.7, 4947.0], [31.8, 4954.0], [31.9, 4954.0], [32.0, 4974.0], [32.1, 4974.0], [32.2, 4993.0], [32.3, 4993.0], [32.4, 5029.0], [32.5, 5029.0], [32.6, 5037.0], [32.7, 5037.0], [32.8, 5109.0], [32.9, 5109.0], [33.0, 5132.0], [33.1, 5132.0], [33.2, 5192.0], [33.3, 5192.0], [33.4, 5204.0], [33.5, 5204.0], [33.6, 5234.0], [33.7, 5234.0], [33.8, 5239.0], [33.9, 5239.0], [34.0, 5251.0], [34.1, 5251.0], [34.2, 5264.0], [34.3, 5264.0], [34.4, 5298.0], [34.5, 5298.0], [34.6, 5329.0], [34.7, 5329.0], [34.8, 5381.0], [34.9, 5381.0], [35.0, 5411.0], [35.1, 5411.0], [35.2, 5428.0], [35.3, 5428.0], [35.4, 5451.0], [35.5, 5451.0], [35.6, 5481.0], [35.7, 5481.0], [35.8, 5481.0], [35.9, 5481.0], [36.0, 5529.0], [36.1, 5529.0], [36.2, 5543.0], [36.3, 5543.0], [36.4, 5611.0], [36.5, 5611.0], [36.6, 5612.0], [36.7, 5612.0], [36.8, 5622.0], [36.9, 5622.0], [37.0, 5644.0], [37.1, 5644.0], [37.2, 5676.0], [37.3, 5676.0], [37.4, 5677.0], [37.5, 5677.0], [37.6, 5718.0], [37.7, 5718.0], [37.8, 5725.0], [37.9, 5725.0], [38.0, 5733.0], [38.1, 5733.0], [38.2, 5789.0], [38.3, 5789.0], [38.4, 5789.0], [38.5, 5877.0], [38.6, 5877.0], [38.7, 5881.0], [38.8, 5881.0], [38.9, 5882.0], [39.0, 5882.0], [39.1, 5954.0], [39.2, 5954.0], [39.3, 6127.0], [39.4, 6127.0], [39.5, 6142.0], [39.6, 6142.0], [39.7, 6153.0], [39.8, 6153.0], [39.9, 6164.0], [40.0, 6164.0], [40.1, 6208.0], [40.2, 6208.0], [40.3, 6264.0], [40.4, 6264.0], [40.5, 6295.0], [40.6, 6295.0], [40.7, 6321.0], [40.8, 6321.0], [40.9, 6346.0], [41.0, 6346.0], [41.1, 6390.0], [41.2, 6390.0], [41.3, 6426.0], [41.4, 6426.0], [41.5, 6442.0], [41.6, 6442.0], [41.7, 6465.0], [41.8, 6465.0], [41.9, 6470.0], [42.0, 6470.0], [42.1, 6483.0], [42.2, 6483.0], [42.3, 6513.0], [42.4, 6513.0], [42.5, 6542.0], [42.6, 6542.0], [42.7, 6550.0], [42.8, 6550.0], [42.9, 6566.0], [43.0, 6566.0], [43.1, 6603.0], [43.2, 6603.0], [43.3, 6695.0], [43.4, 6695.0], [43.5, 6699.0], [43.6, 6699.0], [43.7, 6709.0], [43.8, 6709.0], [43.9, 6709.0], [44.0, 6709.0], [44.1, 6734.0], [44.2, 6734.0], [44.3, 6762.0], [44.4, 6762.0], [44.5, 6813.0], [44.6, 6813.0], [44.7, 6836.0], [44.8, 6836.0], [44.9, 6854.0], [45.0, 6854.0], [45.1, 6900.0], [45.2, 6900.0], [45.3, 6908.0], [45.4, 6908.0], [45.5, 6913.0], [45.6, 6913.0], [45.7, 6997.0], [45.8, 6997.0], [45.9, 7052.0], [46.0, 7052.0], [46.1, 7087.0], [46.2, 7087.0], [46.3, 7117.0], [46.4, 7117.0], [46.5, 7132.0], [46.6, 7132.0], [46.7, 7169.0], [46.8, 7169.0], [46.9, 7178.0], [47.0, 7178.0], [47.1, 7185.0], [47.2, 7185.0], [47.3, 7189.0], [47.4, 7189.0], [47.5, 7244.0], [47.6, 7244.0], [47.7, 7260.0], [47.8, 7260.0], [47.9, 7287.0], [48.0, 7287.0], [48.1, 7299.0], [48.2, 7299.0], [48.3, 7312.0], [48.4, 7312.0], [48.5, 7332.0], [48.6, 7332.0], [48.7, 7334.0], [48.8, 7334.0], [48.9, 7350.0], [49.0, 7350.0], [49.1, 7394.0], [49.2, 7394.0], [49.3, 7419.0], [49.4, 7419.0], [49.5, 7434.0], [49.6, 7434.0], [49.7, 7455.0], [49.8, 7455.0], [49.9, 7476.0], [50.0, 7476.0], [50.1, 7493.0], [50.2, 7493.0], [50.3, 7515.0], [50.4, 7515.0], [50.5, 7580.0], [50.6, 7580.0], [50.7, 7582.0], [50.8, 7582.0], [50.9, 7586.0], [51.0, 7586.0], [51.1, 7591.0], [51.2, 7591.0], [51.3, 7624.0], [51.4, 7624.0], [51.5, 7653.0], [51.6, 7653.0], [51.7, 7658.0], [51.8, 7658.0], [51.9, 7766.0], [52.0, 7766.0], [52.1, 7800.0], [52.2, 7800.0], [52.3, 7826.0], [52.4, 7826.0], [52.5, 7829.0], [52.6, 7829.0], [52.7, 7833.0], [52.8, 7833.0], [52.9, 7847.0], [53.0, 7847.0], [53.1, 7850.0], [53.2, 7850.0], [53.3, 7851.0], [53.4, 7851.0], [53.5, 7887.0], [53.6, 7887.0], [53.7, 7934.0], [53.8, 7934.0], [53.9, 8007.0], [54.0, 8007.0], [54.1, 8046.0], [54.2, 8046.0], [54.3, 8055.0], [54.4, 8055.0], [54.5, 8056.0], [54.6, 8056.0], [54.7, 8084.0], [54.8, 8084.0], [54.9, 8191.0], [55.0, 8191.0], [55.1, 8205.0], [55.2, 8205.0], [55.3, 8219.0], [55.4, 8219.0], [55.5, 8229.0], [55.6, 8229.0], [55.7, 8290.0], [55.8, 8290.0], [55.9, 8303.0], [56.0, 8303.0], [56.1, 8310.0], [56.2, 8310.0], [56.3, 8313.0], [56.4, 8313.0], [56.5, 8356.0], [56.6, 8356.0], [56.7, 8372.0], [56.8, 8372.0], [56.9, 8445.0], [57.0, 8445.0], [57.1, 8535.0], [57.2, 8535.0], [57.3, 8551.0], [57.4, 8551.0], [57.5, 8564.0], [57.6, 8564.0], [57.7, 8580.0], [57.8, 8580.0], [57.9, 8620.0], [58.0, 8620.0], [58.1, 8649.0], [58.2, 8649.0], [58.3, 8692.0], [58.4, 8692.0], [58.5, 8736.0], [58.6, 8736.0], [58.7, 8750.0], [58.8, 8750.0], [58.9, 8757.0], [59.0, 8757.0], [59.1, 8810.0], [59.2, 8810.0], [59.3, 8832.0], [59.4, 8832.0], [59.5, 8899.0], [59.6, 8899.0], [59.7, 8903.0], [59.8, 8903.0], [59.9, 9008.0], [60.0, 9008.0], [60.1, 9031.0], [60.2, 9031.0], [60.3, 9040.0], [60.4, 9040.0], [60.5, 9041.0], [60.6, 9041.0], [60.7, 9067.0], [60.8, 9067.0], [60.9, 9069.0], [61.0, 9069.0], [61.1, 9101.0], [61.2, 9101.0], [61.3, 9235.0], [61.4, 9235.0], [61.5, 9263.0], [61.6, 9263.0], [61.7, 9265.0], [61.8, 9265.0], [61.9, 9278.0], [62.0, 9278.0], [62.1, 9279.0], [62.2, 9279.0], [62.3, 9280.0], [62.4, 9280.0], [62.5, 9280.0], [62.6, 9280.0], [62.7, 9283.0], [62.8, 9283.0], [62.9, 9310.0], [63.0, 9310.0], [63.1, 9313.0], [63.2, 9313.0], [63.3, 9328.0], [63.4, 9328.0], [63.5, 9332.0], [63.6, 9332.0], [63.7, 9380.0], [63.8, 9380.0], [63.9, 9381.0], [64.0, 9381.0], [64.1, 9457.0], [64.2, 9457.0], [64.3, 9473.0], [64.4, 9473.0], [64.5, 9500.0], [64.6, 9500.0], [64.7, 9501.0], [64.8, 9501.0], [64.9, 9502.0], [65.0, 9502.0], [65.1, 9532.0], [65.2, 9532.0], [65.3, 9615.0], [65.4, 9615.0], [65.5, 9655.0], [65.6, 9655.0], [65.7, 9687.0], [65.8, 9687.0], [65.9, 9698.0], [66.0, 9698.0], [66.1, 9707.0], [66.2, 9707.0], [66.3, 9739.0], [66.4, 9739.0], [66.5, 9787.0], [66.6, 9787.0], [66.7, 9792.0], [66.8, 9792.0], [66.9, 9816.0], [67.0, 9816.0], [67.1, 9845.0], [67.2, 9845.0], [67.3, 9888.0], [67.4, 9888.0], [67.5, 9922.0], [67.6, 9922.0], [67.7, 9924.0], [67.8, 9924.0], [67.9, 9932.0], [68.0, 9932.0], [68.1, 9958.0], [68.2, 9958.0], [68.3, 9965.0], [68.4, 9965.0], [68.5, 9980.0], [68.6, 9980.0], [68.7, 9992.0], [68.8, 9992.0], [68.9, 10049.0], [69.0, 10049.0], [69.1, 10100.0], [69.2, 10100.0], [69.3, 10130.0], [69.4, 10130.0], [69.5, 10143.0], [69.6, 10143.0], [69.7, 10192.0], [69.8, 10192.0], [69.9, 10202.0], [70.0, 10202.0], [70.1, 10227.0], [70.2, 10227.0], [70.3, 10246.0], [70.4, 10246.0], [70.5, 10260.0], [70.6, 10260.0], [70.7, 10336.0], [70.8, 10336.0], [70.9, 10343.0], [71.0, 10343.0], [71.1, 10376.0], [71.2, 10376.0], [71.3, 10385.0], [71.4, 10385.0], [71.5, 10414.0], [71.6, 10414.0], [71.7, 10415.0], [71.8, 10415.0], [71.9, 10439.0], [72.0, 10439.0], [72.1, 10460.0], [72.2, 10460.0], [72.3, 10476.0], [72.4, 10476.0], [72.5, 10477.0], [72.6, 10477.0], [72.7, 10482.0], [72.8, 10482.0], [72.9, 10493.0], [73.0, 10493.0], [73.1, 10532.0], [73.2, 10532.0], [73.3, 10546.0], [73.4, 10546.0], [73.5, 10602.0], [73.6, 10602.0], [73.7, 10637.0], [73.8, 10637.0], [73.9, 10656.0], [74.0, 10656.0], [74.1, 10675.0], [74.2, 10675.0], [74.3, 10695.0], [74.4, 10695.0], [74.5, 10748.0], [74.6, 10748.0], [74.7, 10763.0], [74.8, 10763.0], [74.9, 10766.0], [75.0, 10766.0], [75.1, 10774.0], [75.2, 10774.0], [75.3, 10803.0], [75.4, 10803.0], [75.5, 10808.0], [75.6, 10808.0], [75.7, 10879.0], [75.8, 10879.0], [75.9, 10888.0], [76.0, 10888.0], [76.1, 10909.0], [76.2, 10909.0], [76.3, 10916.0], [76.4, 10916.0], [76.5, 10918.0], [76.6, 10918.0], [76.7, 10942.0], [76.8, 10942.0], [76.9, 10950.0], [77.0, 10950.0], [77.1, 11026.0], [77.2, 11026.0], [77.3, 11031.0], [77.4, 11031.0], [77.5, 11042.0], [77.6, 11042.0], [77.7, 11082.0], [77.8, 11082.0], [77.9, 11118.0], [78.0, 11118.0], [78.1, 11193.0], [78.2, 11193.0], [78.3, 11206.0], [78.4, 11206.0], [78.5, 11230.0], [78.6, 11230.0], [78.7, 11254.0], [78.8, 11254.0], [78.9, 11266.0], [79.0, 11266.0], [79.1, 11430.0], [79.2, 11430.0], [79.3, 11449.0], [79.4, 11449.0], [79.5, 11480.0], [79.6, 11480.0], [79.7, 11500.0], [79.8, 11500.0], [79.9, 11503.0], [80.0, 11503.0], [80.1, 11522.0], [80.2, 11522.0], [80.3, 11531.0], [80.4, 11531.0], [80.5, 11557.0], [80.6, 11557.0], [80.7, 11585.0], [80.8, 11585.0], [80.9, 11681.0], [81.0, 11681.0], [81.1, 11757.0], [81.2, 11757.0], [81.3, 11765.0], [81.4, 11765.0], [81.5, 11765.0], [81.6, 11765.0], [81.7, 11786.0], [81.8, 11786.0], [81.9, 11828.0], [82.0, 11828.0], [82.1, 11907.0], [82.2, 11907.0], [82.3, 12021.0], [82.4, 12021.0], [82.5, 12077.0], [82.6, 12077.0], [82.7, 12132.0], [82.8, 12132.0], [82.9, 12138.0], [83.0, 12138.0], [83.1, 12147.0], [83.2, 12147.0], [83.3, 12165.0], [83.4, 12165.0], [83.5, 12175.0], [83.6, 12175.0], [83.7, 12212.0], [83.8, 12212.0], [83.9, 12235.0], [84.0, 12235.0], [84.1, 12240.0], [84.2, 12240.0], [84.3, 12290.0], [84.4, 12290.0], [84.5, 12291.0], [84.6, 12291.0], [84.7, 12333.0], [84.8, 12333.0], [84.9, 12338.0], [85.0, 12338.0], [85.1, 12355.0], [85.2, 12355.0], [85.3, 12372.0], [85.4, 12372.0], [85.5, 12383.0], [85.6, 12383.0], [85.7, 12417.0], [85.8, 12417.0], [85.9, 12509.0], [86.0, 12509.0], [86.1, 12529.0], [86.2, 12529.0], [86.3, 12536.0], [86.4, 12536.0], [86.5, 12558.0], [86.6, 12558.0], [86.7, 12568.0], [86.8, 12568.0], [86.9, 12579.0], [87.0, 12579.0], [87.1, 12609.0], [87.2, 12609.0], [87.3, 12614.0], [87.4, 12614.0], [87.5, 12630.0], [87.6, 12630.0], [87.7, 12706.0], [87.8, 12706.0], [87.9, 12707.0], [88.0, 12707.0], [88.1, 12710.0], [88.2, 12710.0], [88.3, 12716.0], [88.4, 12716.0], [88.5, 12748.0], [88.6, 12748.0], [88.7, 12777.0], [88.8, 12777.0], [88.9, 12778.0], [89.0, 12778.0], [89.1, 12794.0], [89.2, 12794.0], [89.3, 12815.0], [89.4, 12815.0], [89.5, 12870.0], [89.6, 12870.0], [89.7, 12892.0], [89.8, 12892.0], [89.9, 12896.0], [90.0, 12896.0], [90.1, 12920.0], [90.2, 12920.0], [90.3, 12928.0], [90.4, 12928.0], [90.5, 12943.0], [90.6, 12943.0], [90.7, 12956.0], [90.8, 12956.0], [90.9, 12970.0], [91.0, 12970.0], [91.1, 12996.0], [91.2, 12996.0], [91.3, 13010.0], [91.4, 13010.0], [91.5, 13077.0], [91.6, 13077.0], [91.7, 13094.0], [91.8, 13094.0], [91.9, 13121.0], [92.0, 13121.0], [92.1, 13126.0], [92.2, 13126.0], [92.3, 13128.0], [92.4, 13128.0], [92.5, 13166.0], [92.6, 13166.0], [92.7, 13170.0], [92.8, 13170.0], [92.9, 13184.0], [93.0, 13184.0], [93.1, 13235.0], [93.2, 13235.0], [93.3, 13249.0], [93.4, 13249.0], [93.5, 13273.0], [93.6, 13273.0], [93.7, 13283.0], [93.8, 13283.0], [93.9, 13291.0], [94.0, 13291.0], [94.1, 13292.0], [94.2, 13292.0], [94.3, 13295.0], [94.4, 13295.0], [94.5, 13306.0], [94.6, 13306.0], [94.7, 13327.0], [94.8, 13327.0], [94.9, 13330.0], [95.0, 13330.0], [95.1, 13437.0], [95.2, 13437.0], [95.3, 13484.0], [95.4, 13484.0], [95.5, 13506.0], [95.6, 13506.0], [95.7, 13538.0], [95.8, 13538.0], [95.9, 13543.0], [96.0, 13543.0], [96.1, 13546.0], [96.2, 13546.0], [96.3, 13583.0], [96.4, 13583.0], [96.5, 13600.0], [96.6, 13600.0], [96.7, 13703.0], [96.8, 13703.0], [96.9, 13782.0], [97.0, 13782.0], [97.1, 14193.0], [97.2, 14193.0], [97.3, 14267.0], [97.4, 14267.0], [97.5, 14490.0], [97.6, 14490.0], [97.7, 14501.0], [97.8, 14501.0], [97.9, 14642.0], [98.0, 14642.0], [98.1, 14674.0], [98.2, 14674.0], [98.3, 15098.0], [98.4, 15098.0], [98.5, 15100.0], [98.6, 15100.0], [98.7, 15261.0], [98.8, 15261.0], [98.9, 15286.0], [99.0, 15286.0], [99.1, 15415.0], [99.2, 15415.0], [99.3, 15506.0], [99.4, 15506.0], [99.5, 15521.0], [99.6, 15521.0], [99.7, 15563.0], [99.8, 15563.0], [99.9, 16039.0], [100.0, 16039.0]], "isOverall": false, "label": "login", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 9.0, "series": [{"data": [[0.0, 1.0], [100.0, 1.0], [500.0, 1.0], [900.0, 1.0], [1100.0, 2.0], [1300.0, 2.0], [1400.0, 4.0], [1600.0, 4.0], [1800.0, 2.0], [1900.0, 3.0], [2000.0, 3.0], [2100.0, 2.0], [2300.0, 2.0], [2200.0, 2.0], [2400.0, 4.0], [2500.0, 5.0], [2600.0, 2.0], [2700.0, 4.0], [2800.0, 1.0], [3000.0, 2.0], [3100.0, 4.0], [3300.0, 2.0], [3200.0, 5.0], [3400.0, 9.0], [3500.0, 1.0], [3800.0, 5.0], [3900.0, 2.0], [4000.0, 8.0], [4200.0, 5.0], [4300.0, 3.0], [4100.0, 1.0], [4500.0, 7.0], [4400.0, 2.0], [4600.0, 1.0], [4800.0, 4.0], [4700.0, 1.0], [5000.0, 2.0], [5300.0, 3.0], [5200.0, 1.0], [5500.0, 5.0], [5600.0, 5.0], [5400.0, 2.0], [5700.0, 4.0], [5800.0, 3.0], [6000.0, 3.0], [6100.0, 4.0], [5900.0, 4.0], [6200.0, 2.0], [6300.0, 6.0], [6600.0, 5.0], [6400.0, 4.0], [6700.0, 5.0], [6800.0, 1.0], [7000.0, 1.0], [7100.0, 2.0], [7200.0, 3.0], [7400.0, 2.0], [7300.0, 4.0], [7600.0, 2.0], [7500.0, 3.0], [7900.0, 3.0], [7800.0, 2.0], [7700.0, 2.0], [8000.0, 3.0], [8100.0, 4.0], [8200.0, 3.0], [8300.0, 4.0], [8400.0, 9.0], [8700.0, 7.0], [8500.0, 5.0], [8800.0, 2.0], [8900.0, 6.0], [9000.0, 4.0], [9200.0, 6.0], [9100.0, 5.0], [9500.0, 3.0], [9700.0, 3.0], [9600.0, 5.0], [9300.0, 2.0], [9400.0, 3.0], [10200.0, 7.0], [9800.0, 3.0], [9900.0, 6.0], [10100.0, 5.0], [10000.0, 2.0], [10600.0, 2.0], [10300.0, 5.0], [10400.0, 5.0], [10500.0, 5.0], [10700.0, 5.0], [10800.0, 4.0], [10900.0, 1.0], [11000.0, 3.0], [11100.0, 5.0], [11200.0, 2.0], [11600.0, 9.0], [11300.0, 4.0], [11400.0, 4.0], [11500.0, 2.0], [11700.0, 2.0], [11800.0, 1.0], [12000.0, 7.0], [12100.0, 5.0], [12200.0, 3.0], [11900.0, 4.0], [12300.0, 5.0], [12400.0, 6.0], [12600.0, 3.0], [12700.0, 4.0], [12500.0, 2.0], [13200.0, 8.0], [12900.0, 4.0], [13300.0, 1.0], [13100.0, 1.0], [12800.0, 3.0], [13500.0, 5.0], [13800.0, 7.0], [13400.0, 1.0], [13700.0, 1.0], [13600.0, 1.0], [14000.0, 8.0], [14200.0, 4.0], [14300.0, 4.0], [14100.0, 2.0], [13900.0, 2.0], [14500.0, 8.0], [14700.0, 9.0], [14800.0, 8.0], [14400.0, 4.0], [14600.0, 3.0], [15000.0, 5.0], [14900.0, 8.0], [15200.0, 1.0], [15100.0, 1.0], [15300.0, 1.0], [15800.0, 2.0], [15400.0, 2.0], [16300.0, 1.0], [16000.0, 1.0], [16400.0, 3.0], [16600.0, 2.0], [16800.0, 1.0], [17700.0, 1.0], [18100.0, 1.0]], "isOverall": false, "label": "500 acessos", "isController": false}, {"data": [[300.0, 1.0], [400.0, 4.0], [500.0, 5.0], [600.0, 4.0], [700.0, 4.0], [800.0, 4.0], [900.0, 4.0], [1000.0, 1.0], [1100.0, 2.0], [1200.0, 2.0], [1300.0, 3.0], [1400.0, 4.0], [1500.0, 4.0], [1600.0, 2.0], [1700.0, 4.0], [1800.0, 2.0], [1900.0, 4.0], [2000.0, 6.0], [2100.0, 2.0], [2300.0, 3.0], [2400.0, 5.0], [2500.0, 3.0], [2600.0, 2.0], [2700.0, 7.0], [2800.0, 2.0], [2900.0, 1.0], [3000.0, 3.0], [3100.0, 5.0], [3200.0, 1.0], [3300.0, 3.0], [3400.0, 4.0], [3500.0, 4.0], [3600.0, 3.0], [3700.0, 4.0], [3800.0, 4.0], [3900.0, 4.0], [4000.0, 4.0], [4100.0, 4.0], [4200.0, 1.0], [4300.0, 6.0], [4400.0, 5.0], [4500.0, 4.0], [4600.0, 1.0], [4700.0, 6.0], [4800.0, 4.0], [4900.0, 7.0], [5000.0, 2.0], [5100.0, 3.0], [5200.0, 6.0], [5300.0, 2.0], [5400.0, 5.0], [5500.0, 2.0], [5600.0, 6.0], [5700.0, 4.0], [5800.0, 3.0], [5900.0, 1.0], [6100.0, 4.0], [6200.0, 3.0], [6300.0, 3.0], [6400.0, 5.0], [6500.0, 4.0], [6600.0, 3.0], [6700.0, 4.0], [6800.0, 3.0], [6900.0, 4.0], [7000.0, 2.0], [7100.0, 6.0], [7200.0, 4.0], [7300.0, 5.0], [7400.0, 5.0], [7500.0, 5.0], [7600.0, 3.0], [7700.0, 1.0], [7800.0, 8.0], [7900.0, 1.0], [8000.0, 5.0], [8100.0, 1.0], [8200.0, 4.0], [8300.0, 5.0], [8400.0, 1.0], [8500.0, 4.0], [8600.0, 3.0], [8700.0, 3.0], [9000.0, 6.0], [9200.0, 8.0], [8800.0, 3.0], [8900.0, 1.0], [9100.0, 1.0], [9300.0, 6.0], [9500.0, 4.0], [9400.0, 2.0], [9600.0, 4.0], [9700.0, 4.0], [9900.0, 7.0], [10000.0, 1.0], [10200.0, 4.0], [9800.0, 3.0], [10100.0, 4.0], [10300.0, 4.0], [10500.0, 2.0], [10400.0, 8.0], [10600.0, 5.0], [10700.0, 4.0], [10800.0, 4.0], [10900.0, 5.0], [11000.0, 4.0], [11100.0, 2.0], [11200.0, 4.0], [11400.0, 3.0], [11500.0, 6.0], [11600.0, 1.0], [11700.0, 4.0], [12200.0, 5.0], [11900.0, 1.0], [11800.0, 1.0], [12000.0, 2.0], [12100.0, 5.0], [12300.0, 5.0], [12400.0, 1.0], [12500.0, 6.0], [12600.0, 3.0], [12700.0, 8.0], [12800.0, 4.0], [12900.0, 6.0], [13000.0, 3.0], [13100.0, 6.0], [13200.0, 7.0], [13300.0, 3.0], [13700.0, 2.0], [13400.0, 2.0], [13500.0, 5.0], [13600.0, 1.0], [14100.0, 1.0], [14200.0, 1.0], [14400.0, 1.0], [14600.0, 2.0], [14500.0, 1.0], [15000.0, 1.0], [15100.0, 1.0], [15200.0, 2.0], [15500.0, 3.0], [15400.0, 1.0], [16000.0, 1.0]], "isOverall": false, "label": "login", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 18100.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 7.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1.500ms"], [2, "Requests having \nresponse time > 1.500ms"], [3, "Requests in error"]], "maxY": 950.0, "series": [{"data": [[0.0, 7.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 43.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1.500ms", "isController": false}, {"data": [[2.0, 950.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1.500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 280.56515373352835, "minX": 1.75432488E12, "maxY": 322.3880126182966, "series": [{"data": [[1.75432494E12, 280.56515373352835], [1.75432488E12, 322.3880126182966]], "isOverall": false, "label": "Listagem de restaurantes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75432494E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 77.0, "minX": 1.0, "maxY": 17792.0, "series": [{"data": [[5.0, 2757.0], [9.0, 2329.0], [11.0, 5329.0], [13.0, 5743.0], [14.0, 5418.0], [15.0, 5529.0], [16.0, 2842.0], [19.0, 6070.0], [21.0, 4803.0], [22.0, 4039.5], [23.0, 5938.0], [24.0, 1315.0], [25.0, 1640.0], [26.0, 3448.0], [27.0, 5860.0], [28.0, 1952.0], [29.0, 3057.0], [33.0, 4919.5], [35.0, 5020.0], [36.0, 2720.0], [38.0, 5850.0], [40.0, 4529.5], [43.0, 3642.6666666666665], [45.0, 10193.0], [47.0, 5323.0], [46.0, 2486.0], [49.0, 3508.0], [48.0, 5903.0], [50.0, 3884.0], [53.0, 3207.0], [52.0, 9315.5], [55.0, 1110.0], [54.0, 6300.0], [57.0, 2277.0], [56.0, 2505.0], [60.0, 8321.666666666666], [63.0, 4059.0], [62.0, 7654.0], [66.0, 2552.0], [65.0, 5053.0], [71.0, 8122.0], [69.0, 3444.0], [68.0, 5055.5], [75.0, 5373.0], [74.0, 1692.0], [73.0, 4220.0], [72.0, 4204.0], [79.0, 6227.0], [77.0, 3123.0], [83.0, 4721.5], [81.0, 10772.0], [87.0, 5287.5], [85.0, 6093.0], [90.0, 9126.0], [89.0, 1497.0], [88.0, 2557.0], [95.0, 8723.0], [94.0, 4493.5], [92.0, 8844.5], [99.0, 11183.0], [98.0, 6354.0], [97.0, 2075.0], [103.0, 5992.0], [102.0, 9613.0], [101.0, 12177.0], [100.0, 9797.0], [106.0, 5758.5], [107.0, 6351.0], [105.0, 2779.0], [104.0, 9319.0], [111.0, 11344.0], [110.0, 2386.0], [109.0, 6159.0], [108.0, 9800.0], [115.0, 12881.0], [114.0, 11696.0], [112.0, 2513.0], [119.0, 12088.0], [118.0, 3159.0], [117.0, 3183.0], [116.0, 6458.5], [122.0, 6863.5], [121.0, 10808.0], [125.0, 11495.0], [135.0, 15310.0], [134.0, 2737.0], [133.0, 12422.0], [132.0, 3832.0], [131.0, 9715.0], [129.0, 11676.0], [128.0, 9975.4], [143.0, 9992.5], [141.0, 7651.0], [140.0, 12432.0], [139.0, 3174.0], [138.0, 7383.0], [137.0, 7000.0], [136.0, 3887.0], [151.0, 5205.0], [150.0, 5736.0], [148.0, 5796.5], [146.0, 14560.0], [145.0, 12822.0], [144.0, 4316.0], [159.0, 6497.0], [157.0, 7740.666666666667], [154.0, 10686.5], [152.0, 13247.0], [167.0, 13819.0], [166.0, 13809.333333333334], [164.0, 9851.0], [161.0, 4271.0], [160.0, 8188.0], [175.0, 7970.0], [174.0, 9495.0], [173.0, 14607.5], [171.0, 4131.0], [170.0, 6249.5], [168.0, 4041.0], [183.0, 7728.0], [181.0, 1499.0], [180.0, 1400.0], [179.0, 8212.0], [178.0, 13801.0], [177.0, 14381.0], [176.0, 5233.0], [191.0, 6158.0], [190.0, 911.0], [189.0, 10502.0], [188.0, 10021.0], [187.0, 10057.0], [186.0, 12001.0], [185.0, 8430.5], [199.0, 7243.0], [198.0, 6744.0], [197.0, 10594.0], [196.0, 10550.0], [195.0, 12153.0], [193.0, 6412.0], [192.0, 10112.0], [201.0, 3428.5], [207.0, 4686.5], [206.0, 6088.0], [205.0, 10244.0], [204.0, 10347.0], [203.0, 1896.0], [202.0, 6713.0], [200.0, 10730.0], [215.0, 14980.0], [214.0, 5642.0], [213.0, 5607.0], [212.0, 10574.0], [211.0, 9496.0], [210.0, 9696.0], [209.0, 2122.0], [208.0, 10107.0], [223.0, 6188.0], [222.0, 11133.0], [221.0, 10269.0], [219.0, 16489.0], [218.0, 2498.0], [217.0, 11986.0], [216.0, 6667.0], [231.0, 10861.5], [229.0, 11348.0], [228.0, 14586.0], [227.0, 9082.0], [226.0, 11211.0], [225.0, 1678.0], [224.0, 113.0], [236.0, 8349.5], [239.0, 12116.0], [237.0, 2720.0], [235.0, 2494.0], [234.0, 15430.0], [233.0, 2699.0], [232.0, 14895.0], [247.0, 14042.0], [246.0, 12416.5], [245.0, 12060.0], [242.0, 12475.0], [241.0, 12259.0], [240.0, 12377.0], [255.0, 12922.0], [254.0, 7689.0], [253.0, 12886.0], [252.0, 8001.0], [251.0, 8440.0], [250.0, 9781.5], [248.0, 12468.0], [271.0, 8084.5], [263.0, 9006.5], [256.0, 13121.0], [258.0, 3494.0], [257.0, 3443.0], [265.0, 9173.0], [270.0, 7241.0], [268.0, 4440.0], [267.0, 15883.0], [266.0, 8342.0], [264.0, 7227.0], [262.0, 4037.0], [261.0, 13570.0], [260.0, 14615.0], [286.0, 9209.0], [287.0, 10469.0], [285.0, 11390.5], [275.0, 8471.0], [274.0, 9163.0], [273.0, 17792.0], [272.0, 7822.0], [283.0, 7431.0], [281.0, 13970.0], [280.0, 9817.0], [278.0, 5763.0], [277.0, 10120.0], [276.0, 13943.0], [300.0, 5784.0], [303.0, 10379.0], [302.0, 11324.0], [301.0, 10494.0], [299.0, 13189.5], [295.0, 15092.5], [289.0, 9668.0], [288.0, 5330.0], [293.0, 8739.0], [292.0, 14176.0], [291.0, 8745.0], [290.0, 10203.0], [318.0, 11439.0], [319.0, 11275.0], [317.0, 14748.0], [316.0, 11055.0], [315.0, 11242.0], [313.0, 11074.0], [312.0, 14778.0], [311.0, 12793.5], [305.0, 14505.0], [304.0, 14533.0], [307.0, 16363.0], [306.0, 14430.0], [309.0, 6615.0], [308.0, 14498.0], [333.0, 12555.0], [322.0, 7483.75], [321.0, 9415.5], [320.0, 14736.0], [327.0, 14889.0], [326.0, 11914.0], [325.0, 14870.0], [324.0, 6070.0], [323.0, 10234.0], [328.0, 8859.0], [329.0, 12109.0], [335.0, 14973.0], [334.0, 12555.0], [332.0, 16812.0], [331.0, 3315.0], [330.0, 12302.0], [351.0, 16665.0], [348.0, 10488.0], [339.0, 6732.0], [338.0, 12993.0], [337.0, 12769.0], [336.0, 14970.0], [349.0, 8477.0], [350.0, 14791.0], [347.0, 8512.0], [346.0, 14977.0], [345.0, 15040.0], [344.0, 15094.0], [343.0, 13236.0], [342.0, 4067.0], [341.0, 15095.0], [340.0, 15087.0], [366.0, 14414.0], [359.0, 9091.0], [352.0, 8490.5], [353.0, 14848.0], [355.0, 16496.0], [354.0, 14732.0], [358.0, 9581.0], [357.0, 14641.0], [356.0, 14669.0], [367.0, 14246.0], [361.0, 14514.0], [360.0, 14537.0], [365.0, 14403.0], [364.0, 14374.0], [363.0, 8917.0], [362.0, 14512.0], [383.0, 13528.0], [379.0, 10146.5], [382.0, 11617.0], [381.0, 13555.0], [380.0, 11666.0], [371.0, 13835.0], [370.0, 14069.0], [369.0, 14043.0], [368.0, 14062.0], [378.0, 13585.0], [377.0, 4566.0], [376.0, 9327.0], [375.0, 13876.0], [374.0, 13878.0], [373.0, 13865.0], [372.0, 13856.0], [398.0, 4591.0], [399.0, 12467.0], [397.0, 12603.0], [396.0, 14759.0], [395.0, 9543.0], [394.0, 10775.0], [393.0, 9614.0], [392.0, 14778.0], [391.0, 12760.0], [385.0, 13238.0], [384.0, 13240.0], [387.0, 15019.0], [386.0, 13229.0], [390.0, 12726.0], [389.0, 14840.0], [388.0, 12958.0], [414.0, 9832.0], [415.0, 14036.0], [413.0, 11695.0], [412.0, 14028.0], [411.0, 9995.0], [410.0, 11876.0], [409.0, 12051.0], [408.0, 12105.0], [407.0, 12108.0], [401.0, 9936.0], [400.0, 14597.0], [403.0, 12305.0], [402.0, 12320.0], [406.0, 12093.0], [405.0, 12215.0], [404.0, 4735.0], [430.0, 10779.0], [431.0, 8802.0], [429.0, 10788.0], [428.0, 10870.0], [427.0, 10946.0], [426.0, 10279.0], [425.0, 11040.0], [424.0, 11120.0], [423.0, 11394.0], [417.0, 11652.0], [416.0, 11794.0], [419.0, 11511.0], [418.0, 11633.0], [422.0, 11459.0], [421.0, 11467.0], [420.0, 11544.0], [446.0, 10114.0], [447.0, 9936.0], [445.0, 7973.0], [444.0, 10315.0], [443.0, 10299.0], [442.0, 10304.0], [441.0, 10251.0], [440.0, 10292.0], [439.0, 10447.0], [433.0, 13220.0], [432.0, 13232.0], [435.0, 10585.0], [434.0, 10670.0], [438.0, 8401.0], [437.0, 10484.0], [436.0, 8574.0], [462.0, 8939.0], [463.0, 8907.0], [461.0, 8967.0], [460.0, 8957.0], [459.0, 9043.0], [458.0, 9063.0], [457.0, 9064.0], [456.0, 10644.0], [455.0, 9233.0], [449.0, 9972.0], [448.0, 9996.0], [451.0, 9767.0], [450.0, 9868.0], [454.0, 9523.0], [453.0, 9731.0], [452.0, 11609.0], [466.0, 8791.0], [472.0, 8341.0], [469.0, 9253.0], [475.0, 8401.0], [474.0, 8445.0], [473.0, 8402.0], [471.0, 8484.0], [465.0, 8806.0], [464.0, 8985.0], [470.0, 8468.0], [468.0, 8713.0], [467.0, 8792.0], [1.0, 77.0]], "isOverall": false, "label": "500 acessos", "isController": false}, {"data": [[241.76400000000027, 9084.730000000012]], "isOverall": false, "label": "500 acessos-Aggregated", "isController": false}, {"data": [[20.0, 386.0], [25.0, 466.0], [28.0, 481.0], [29.0, 516.5], [33.0, 545.0], [35.0, 540.0], [36.0, 538.0], [37.0, 610.0], [39.0, 593.0], [43.0, 15506.0], [52.0, 832.0], [53.0, 818.0], [54.0, 790.0], [55.0, 796.0], [56.0, 777.0], [58.0, 785.0], [59.0, 874.5], [61.0, 941.0], [65.0, 655.0], [78.0, 824.0], [80.0, 1135.0], [81.0, 1127.0], [82.0, 660.0], [83.0, 1205.0], [84.0, 960.0], [85.0, 1299.0], [88.0, 1040.0], [91.0, 1394.0], [104.0, 1479.3333333333333], [106.0, 1506.0], [105.0, 1352.0], [107.0, 1599.0], [112.0, 1539.0], [117.0, 1518.0], [126.0, 1066.5], [127.0, 2032.0], [129.0, 2078.0], [130.0, 1758.0], [131.0, 1843.0], [133.0, 1797.5], [134.0, 15286.0], [141.0, 1912.0], [144.0, 1942.0], [149.0, 1976.0], [151.0, 2079.0], [152.0, 2648.0], [154.0, 2047.0], [155.0, 2072.5], [162.0, 2165.0], [171.0, 2326.0], [179.0, 2454.0], [181.0, 2427.0], [183.0, 2497.0], [184.0, 2497.0], [185.0, 2488.0], [187.0, 2517.0], [191.0, 2555.0], [194.0, 2573.0], [195.0, 2610.0], [201.0, 2706.0], [202.0, 2725.0], [204.0, 2732.0], [205.0, 2719.0], [207.0, 2824.0], [209.0, 2793.0], [216.0, 8752.0], [220.0, 2982.0], [226.0, 3049.0], [229.0, 3120.5], [232.0, 3135.0], [235.0, 6417.0], [236.0, 3165.0], [237.0, 3225.0], [233.0, 14501.0], [245.0, 3324.0], [247.0, 3343.0], [249.0, 3358.0], [255.0, 3435.0], [251.0, 15261.0], [256.0, 3511.0], [259.0, 3485.0], [260.0, 3479.0], [261.0, 3562.0], [263.0, 3508.0], [268.0, 3594.0], [269.0, 3641.5], [272.0, 9576.0], [277.0, 3753.0], [278.0, 3703.0], [279.0, 1317.0], [281.0, 3746.0], [283.0, 3819.0], [285.0, 3777.0], [289.0, 9693.0], [292.0, 3834.0], [293.0, 1481.0], [294.0, 3888.0], [299.0, 3929.0], [303.0, 3936.0], [301.0, 13600.0], [318.0, 13524.5], [307.0, 8819.0], [309.0, 1702.0], [311.0, 4066.0], [313.0, 4092.0], [314.0, 2904.5], [319.0, 4144.5], [316.0, 13546.0], [308.0, 13538.0], [321.0, 4176.0], [322.0, 4218.0], [327.0, 4326.0], [328.0, 7357.333333333334], [329.0, 4301.0], [331.0, 4326.0], [332.0, 4330.0], [323.0, 13484.0], [349.0, 12319.874999999998], [339.0, 2191.0], [343.0, 13283.0], [340.0, 4444.0], [342.0, 4462.0], [345.0, 10383.0], [347.0, 4484.333333333333], [351.0, 4607.0], [344.0, 13288.333333333334], [348.0, 13249.0], [346.0, 15100.0], [365.0, 4765.0], [360.0, 9710.5], [358.0, 6749.25], [352.0, 13077.0], [354.0, 12951.875], [353.0, 13094.0], [363.0, 8755.75], [367.0, 12772.8], [366.0, 12790.333333333334], [362.0, 12760.8], [361.0, 12716.0], [357.0, 12870.0], [356.0, 12896.0], [381.0, 4915.0], [369.0, 7338.666666666666], [372.0, 10343.0], [375.0, 14107.0], [368.0, 12355.0], [379.0, 9828.8], [378.0, 8425.5], [380.0, 8356.0], [371.0, 12189.0], [370.0, 12658.6], [383.0, 10352.4], [377.0, 11828.0], [376.0, 12049.0], [387.0, 11266.0], [389.0, 9048.333333333334], [388.0, 8936.999999999998], [398.0, 5132.0], [397.0, 10839.0], [396.0, 10936.666666666666], [393.0, 9067.0], [392.0, 9069.0], [390.0, 11031.0], [386.0, 11058.8], [384.0, 11514.75], [412.0, 5281.0], [400.0, 7967.5], [401.0, 10711.0], [403.0, 9997.857142857143], [402.0, 10656.0], [404.0, 7858.0], [405.0, 10445.0], [406.0, 5221.5], [409.0, 9785.727272727272], [410.0, 3049.0], [414.0, 9978.5], [408.0, 10413.0], [413.0, 9004.0], [411.0, 10100.0], [429.0, 5428.0], [416.0, 8799.75], [420.0, 8101.75], [423.0, 8938.857142857143], [422.0, 9663.75], [424.0, 8014.0], [427.0, 7716.75], [430.0, 5446.0], [428.0, 9035.5], [419.0, 8821.5], [418.0, 9830.5], [417.0, 9888.0], [426.0, 8306.0], [425.0, 9298.5], [445.0, 7701.6], [433.0, 8554.75], [434.0, 8832.0], [438.0, 5543.0], [437.0, 8585.5], [436.0, 8195.75], [439.0, 8090.125], [442.0, 5611.0], [440.0, 10532.0], [447.0, 7405.6], [446.0, 8346.333333333332], [444.0, 8235.75], [435.0, 8750.666666666666], [443.0, 8310.0], [460.0, 6261.5], [449.0, 6964.6], [451.0, 7608.0], [450.0, 9985.5], [452.0, 6947.333333333334], [453.0, 7428.666666666666], [454.0, 7314.818181818182], [462.0, 7467.333333333333], [461.0, 6762.0], [459.0, 7499.875], [456.0, 9328.0], [455.0, 7097.0], [464.0, 6466.5], [466.0, 6242.0], [468.0, 6195.0], [470.0, 5954.0], [471.0, 6158.8], [469.0, 6205.0], [467.0, 6550.0]], "isOverall": false, "label": "login", "isController": false}, {"data": [[345.882, 7482.322000000006]], "isOverall": false, "label": "login-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 475.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 1432.2, "minX": 1.75432488E12, "maxY": 23894.066666666666, "series": [{"data": [[1.75432494E12, 23894.066666666666], [1.75432488E12, 5330.933333333333]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.75432494E12, 3917.8], [1.75432488E12, 1432.2]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75432494E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 4286.954545454546, "minX": 1.75432488E12, "maxY": 11056.800847457624, "series": [{"data": [[1.75432494E12, 9309.928411633105], [1.75432488E12, 7185.415094339621]], "isOverall": false, "label": "500 acessos", "isController": false}, {"data": [[1.75432494E12, 11056.800847457624], [1.75432488E12, 4286.954545454546]], "isOverall": false, "label": "login", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75432494E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 4286.916666666663, "minX": 1.75432488E12, "maxY": 11056.758474576267, "series": [{"data": [[1.75432494E12, 9295.22371364653], [1.75432488E12, 7180.8490566037735]], "isOverall": false, "label": "500 acessos", "isController": false}, {"data": [[1.75432494E12, 11056.758474576267], [1.75432488E12, 4286.916666666663]], "isOverall": false, "label": "login", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75432494E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.75432488E12, "maxY": 0.7462121212121213, "series": [{"data": [[1.75432494E12, 0.0], [1.75432488E12, 0.0]], "isOverall": false, "label": "500 acessos", "isController": false}, {"data": [[1.75432494E12, 0.576271186440678], [1.75432488E12, 0.7462121212121213]], "isOverall": false, "label": "login", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75432494E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 77.0, "minX": 1.75432488E12, "maxY": 18175.0, "series": [{"data": [[1.75432494E12, 18175.0], [1.75432488E12, 11609.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.75432494E12, 14509.2], [1.75432488E12, 8449.6]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.75432494E12, 16490.12], [1.75432488E12, 10184.3]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.75432494E12, 14972.4], [1.75432488E12, 9237.499999999998]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.75432494E12, 77.0], [1.75432488E12, 386.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.75432494E12, 10469.0], [1.75432488E12, 4729.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75432494E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 601.5, "minX": 17.0, "maxY": 13287.0, "series": [{"data": [[32.0, 11036.5], [128.0, 12296.5], [34.0, 10047.5], [36.0, 10646.5], [39.0, 12892.0], [158.0, 7740.0], [40.0, 13287.0], [66.0, 4039.5], [17.0, 3146.0], [18.0, 601.5], [19.0, 1205.0], [20.0, 2536.0], [21.0, 1942.0], [23.0, 5239.0], [25.0, 5881.0], [26.0, 3677.5], [28.0, 6473.0], [29.0, 9194.5], [30.0, 7584.0], [31.0, 8753.5]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 158.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 601.5, "minX": 17.0, "maxY": 13287.0, "series": [{"data": [[32.0, 11036.5], [128.0, 12295.0], [34.0, 10047.0], [36.0, 10646.5], [39.0, 12892.0], [158.0, 7738.0], [40.0, 13287.0], [66.0, 4016.5], [17.0, 3145.0], [18.0, 601.5], [19.0, 1205.0], [20.0, 2535.5], [21.0, 1942.0], [23.0, 5239.0], [25.0, 5881.0], [26.0, 3677.5], [28.0, 6473.0], [29.0, 9194.5], [30.0, 7584.0], [31.0, 8753.5]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 158.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 3.933333333333333, "minX": 1.75432488E12, "maxY": 12.733333333333333, "series": [{"data": [[1.75432494E12, 3.933333333333333], [1.75432488E12, 12.733333333333333]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75432494E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 5.283333333333333, "minX": 1.75432488E12, "maxY": 11.383333333333333, "series": [{"data": [[1.75432494E12, 11.383333333333333], [1.75432488E12, 5.283333333333333]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75432494E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.8833333333333333, "minX": 1.75432488E12, "maxY": 7.45, "series": [{"data": [[1.75432494E12, 7.45], [1.75432488E12, 0.8833333333333333]], "isOverall": false, "label": "500 acessos-success", "isController": false}, {"data": [[1.75432494E12, 3.933333333333333], [1.75432488E12, 4.4]], "isOverall": false, "label": "login-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75432494E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 5.283333333333333, "minX": 1.75432488E12, "maxY": 11.383333333333333, "series": [{"data": [[1.75432494E12, 11.383333333333333], [1.75432488E12, 5.283333333333333]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75432494E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

